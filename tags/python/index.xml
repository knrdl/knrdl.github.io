<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on knrdlog</title><link>https://knrdl.github.io/tags/python/</link><description>Recent content in python on knrdlog</description><language>en-us</language><copyright>Licensed under &lt;a href='https://creativecommons.org/publicdomain/zero/1.0/' target='_blank' rel='noopener norefferer'>CC0 1.0&lt;/a> |
&lt;a href="https://gohugo.io" target='_blank' rel='noopener norefferer'>Hugo&lt;/a> theme inspired by &lt;a href="https://github.com/vamc19" target='_blank' rel='noopener norefferer'>vamc19&lt;/a> |
Hosted by &lt;a href="https://pages.github.com" target='_blank' rel='noopener norefferer'>Github&lt;/a> (&lt;a href="https://github.com/site/privacy" target='_blank' rel='noopener norefferer'>Privacy Policy&lt;/a>)</copyright><lastBuildDate>Fri, 12 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://knrdl.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitlab: Generate repository list report</title><link>https://knrdl.github.io/posts/gitlab-repo-list/</link><pubDate>Fri, 12 May 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/gitlab-repo-list/</guid><description>&lt;ol>
&lt;li>You must be admin to get a list of all repositories&lt;/li>
&lt;li>You need a personal access token: Gitlab WebUI → Preferences → Access Tokens → Select scopes: &lt;code>api&lt;/code> or &lt;code>read_api&lt;/code> → Create personal access token&lt;/li>
&lt;li>Run the script:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> csv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>token &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;YOUR_PERSONAL_ACCESS_TOKEN&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>page &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repos &lt;span style="color:#ff79c6">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">while&lt;/span> &lt;span style="color:#ff79c6">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;Page:&amp;#39;&lt;/span>, page)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#ff79c6">=&lt;/span> requests&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">f&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;https://gitlab.example.org/api/v4/projects?page=&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>page&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;amp;per_page=100&amp;amp;private_token=&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>token&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">assert&lt;/span> res&lt;span style="color:#ff79c6">.&lt;/span>status_code &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> records &lt;span style="color:#ff79c6">=&lt;/span> res&lt;span style="color:#ff79c6">.&lt;/span>json()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> records:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> record &lt;span style="color:#ff79c6">in&lt;/span> records:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> creator_id &lt;span style="color:#ff79c6">=&lt;/span> record[&lt;span style="color:#f1fa8c">&amp;#39;creator_id&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> creator_id: &lt;span style="color:#6272a4"># attach creator user record to the repo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> creator_id &lt;span style="color:#ff79c6">not&lt;/span> &lt;span style="color:#ff79c6">in&lt;/span> users:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_res &lt;span style="color:#ff79c6">=&lt;/span> requests&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">f&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;https://gitlab.example.org/api/v4/users/&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>creator_id&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">?private_token=&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>token&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">assert&lt;/span> user_res&lt;span style="color:#ff79c6">.&lt;/span>status_code &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> users[creator_id] &lt;span style="color:#ff79c6">=&lt;/span> user_res&lt;span style="color:#ff79c6">.&lt;/span>json()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">=&lt;/span> users[creator_id]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repos&lt;span style="color:#ff79c6">.&lt;/span>append(record)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> page&lt;span style="color:#ff79c6">+=&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">with&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">open&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;repos.json&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#ff79c6">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json&lt;span style="color:#ff79c6">.&lt;/span>dump(repos, f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">with&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">open&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;repos.csv&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#ff79c6">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> csvw &lt;span style="color:#ff79c6">=&lt;/span> csv&lt;span style="color:#ff79c6">.&lt;/span>writer(f, delimiter&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;,&amp;#39;&lt;/span>, quotechar&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;&amp;#34;&amp;#39;&lt;/span>, quoting&lt;span style="color:#ff79c6">=&lt;/span>csv&lt;span style="color:#ff79c6">.&lt;/span>QUOTE_MINIMAL)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> csvw&lt;span style="color:#ff79c6">.&lt;/span>writerow([&lt;span style="color:#f1fa8c">&amp;#39;Title&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Url&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Creator&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Created&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Last Activity&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Private&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> repo &lt;span style="color:#ff79c6">in&lt;/span> repos:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;archived&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">and&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;empty_repo&amp;#39;&lt;/span>]: &lt;span style="color:#6272a4"># filter out archived repos and repos without files (e.g. issue only repos)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> csvw&lt;span style="color:#ff79c6">.&lt;/span>writerow([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;name_with_namespace&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;web_url&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">f&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>repo[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;name&amp;#39;&lt;/span>]&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c"> (&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>repo[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;username&amp;#39;&lt;/span>]&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">)&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;created_at&amp;#39;&lt;/span>]&lt;span style="color:#ff79c6">.&lt;/span>split(&lt;span style="color:#f1fa8c">&amp;#39;T&amp;#39;&lt;/span>)[&lt;span style="color:#bd93f9">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;last_activity_at&amp;#39;&lt;/span>]&lt;span style="color:#ff79c6">.&lt;/span>split(&lt;span style="color:#f1fa8c">&amp;#39;T&amp;#39;&lt;/span>)[&lt;span style="color:#bd93f9">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;visibility&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;private&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">and&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;namespace&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;path&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">==&lt;/span> repo&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">&amp;#39;owner&amp;#39;&lt;/span>, {})&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">&amp;#39;username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Postgres: Fast row count estimates</title><link>https://knrdl.github.io/posts/postgres-fast-row-count/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/postgres-fast-row-count/</guid><description>&lt;p>Counting rows in postgresql is as easy as &lt;code>select count(1) from mytable&lt;/code>. This is a precise count. But it becomes slow on an increasing number of records, especially when a sequential scan of all table records is required, see &lt;code>explain select count(1) from mytable&lt;/code>. But in the end the user often doesn&amp;rsquo;t care if there are about 125_000_000 or exactly 124_756_849 results. Therefore, a fast row count estimate might be more desirable than a slow precise count.&lt;/p>
&lt;p>Postgres runs internal statistics for the query planner to produce performant decisions. These statistics also include estimates of row counts. They are updated regularly by autovacuum or manually by &lt;code>analyze mytable&lt;/code>. The later one is only necessary to get better results on very recent insert/delete batches.&lt;/p>
&lt;p>This snippet uses the postgres statistics to estimate the row count:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> psycopg2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conn &lt;span style="color:#ff79c6">=&lt;/span> psycopg2&lt;span style="color:#ff79c6">.&lt;/span>connect(os&lt;span style="color:#ff79c6">.&lt;/span>getenv(&lt;span style="color:#f1fa8c">&amp;#39;DB_DSN&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cur &lt;span style="color:#ff79c6">=&lt;/span> conn&lt;span style="color:#ff79c6">.&lt;/span>cursor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cur&lt;span style="color:#ff79c6">.&lt;/span>execute(&lt;span style="color:#f1fa8c">&amp;#39;explain (format json) select * from mytable;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &lt;span style="color:#ff79c6">=&lt;/span> cur&lt;span style="color:#ff79c6">.&lt;/span>fetchone()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>row_count &lt;span style="color:#ff79c6">=&lt;/span> res[&lt;span style="color:#bd93f9">0&lt;/span>][&lt;span style="color:#bd93f9">0&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;Plan&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;Plan Rows&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>