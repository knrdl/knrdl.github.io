<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on knrdlog</title><link>https://knrdl.github.io/tags/python/</link><description>Recent content in python on knrdlog</description><language>en-us</language><copyright>Licensed under &lt;a href='https://creativecommons.org/publicdomain/zero/1.0/' target='_blank' rel='noopener norefferer'>CC0 1.0&lt;/a> |
&lt;a href="https://gohugo.io" target='_blank' rel='noopener norefferer'>Hugo&lt;/a> theme inspired by &lt;a href="https://github.com/vamc19" target='_blank' rel='noopener norefferer'>vamc19&lt;/a> |
Hosted by &lt;a href="https://pages.github.com" target='_blank' rel='noopener norefferer'>Github&lt;/a> (&lt;a href="https://github.com/site/privacy" target='_blank' rel='noopener norefferer'>Privacy Policy&lt;/a>)</copyright><lastBuildDate>Fri, 28 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://knrdl.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Postgres: Fast row count estimates</title><link>https://knrdl.github.io/posts/postgres-fast-row-count/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/postgres-fast-row-count/</guid><description>&lt;p>Counting rows in postgresql is as easy as &lt;code>select count(1) from mytable&lt;/code>. This is a precise count. But it becomes slow on an increasing number of records, especially when a sequential scan of all table records is required, see &lt;code>explain select count(1) from mytable&lt;/code>. But in the end the user often doesn&amp;rsquo;t care if there are about 125_000_000 or exactly 124_756_849 results. Therefore, a fast row count estimate might be more desirable than a slow precise count.&lt;/p>
&lt;p>Postgres runs internal statistics for the query planner to produce performant decisions. These statistics also include estimates of row counts. They are updated regularly by autovacuum or manually by &lt;code>analyze mytable&lt;/code>. The later one is only necessary to get better results on very recent insert/delete batches.&lt;/p>
&lt;p>This snippet uses the postgres statistics to estimate the row count:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> psycopg2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conn &lt;span style="color:#ff79c6">=&lt;/span> psycopg2&lt;span style="color:#ff79c6">.&lt;/span>connect(os&lt;span style="color:#ff79c6">.&lt;/span>getenv(&lt;span style="color:#f1fa8c">&amp;#39;DB_DSN&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cur &lt;span style="color:#ff79c6">=&lt;/span> conn&lt;span style="color:#ff79c6">.&lt;/span>cursor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cur&lt;span style="color:#ff79c6">.&lt;/span>execute(&lt;span style="color:#f1fa8c">&amp;#39;explain (format json) select * from mytable;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &lt;span style="color:#ff79c6">=&lt;/span> cur&lt;span style="color:#ff79c6">.&lt;/span>fetchone()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>row_count &lt;span style="color:#ff79c6">=&lt;/span> res[&lt;span style="color:#bd93f9">0&lt;/span>][&lt;span style="color:#bd93f9">0&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;Plan&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;Plan Rows&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>