<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ssh on knrdlog</title><link>https://knrdl.github.io/tags/ssh/</link><description>Recent content in Ssh on knrdlog</description><language>en-us</language><copyright>Licensed under &lt;a href='https://creativecommons.org/publicdomain/zero/1.0/' target='_blank' rel='noopener norefferer'>CC0 1.0&lt;/a> |
&lt;a href="https://gohugo.io" target='_blank' rel='noopener norefferer'>Hugo&lt;/a> theme inspired by &lt;a href="https://github.com/vamc19" target='_blank' rel='noopener norefferer'>vamc19&lt;/a> |
Hosted by &lt;a href="https://pages.github.com" target='_blank' rel='noopener norefferer'>Github&lt;/a> (&lt;a href="https://github.com/site/privacy" target='_blank' rel='noopener norefferer'>Privacy Policy&lt;/a>)</copyright><lastBuildDate>Fri, 20 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://knrdl.github.io/tags/ssh/index.xml" rel="self" type="application/rss+xml"/><item><title>PinePhone as edge server in a remote network</title><link>https://knrdl.github.io/posts/pinephone-edge-server/</link><pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/pinephone-edge-server/</guid><description>&lt;p>The straight forward way to access a remote network is to setup a VPN connection with the router. If that&amp;rsquo;s not possible, a separate device is required to act as VPN client. A smartphone is particularly suitable for this as it is always on, small, has a low power consumption and makes it easy to configure a wifi connection with the network. The PinePhone is especially suitable for the job as it can host a standard Linux environment which is not messed up like Android. On the PinePhone we need very few tools to work in the remote network:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Wireguard&lt;/strong> for the VPN tunnel&lt;/li>
&lt;li>&lt;strong>SSH&lt;/strong> server&lt;/li>
&lt;li>&lt;strong>Docker&lt;/strong> runtime, e.g. to run a time series database to collect sensor stats&lt;/li>
&lt;/ol>
&lt;h2 id="setup" class="paragraph-header">Setup &lt;a
href="#setup">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>flash PostmarketOS to a microSD card&lt;/li>
&lt;li>run the wizard on the phone (to resize the root partition)&lt;/li>
&lt;li>copy the PostmarketOS img-file to the microSD card&lt;/li>
&lt;li>flash the img-file to the eMMC via &lt;code>dd&lt;/code>:
&lt;a href="https://pine64.org/documentation/PinePhone/Installation/Installation_to_the_eMMC/#from-the-booted-microsd-os" target="_blank" rel="noopener noreferrer">https://pine64.org/documentation/PinePhone/Installation/Installation_to_the_eMMC/#from-the-booted-microsd-os&lt;/a>&lt;/li>
&lt;li>remove the sd card and reboot&lt;/li>
&lt;li>login (user:147147) and connect wifi&lt;/li>
&lt;/ol>
&lt;h3 id="ssh" class="paragraph-header">SSH &lt;a
href="#ssh">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>start ssh server: &lt;code>sudo service sshd start&lt;/code>&lt;/li>
&lt;li>enable ssh on boot: &lt;code>sudo rc-update add sshd&lt;/code>&lt;/li>
&lt;li>connect to the phone: &lt;code>ssh user@pine64-pinephone&lt;/code>&lt;/li>
&lt;li>in &lt;code>/etc/ssh/sshd_config&lt;/code>: set &lt;code>AllowTcpForwarding yes&lt;/code> to forward ports from the remote network to your local host&lt;/li>
&lt;/ol>
&lt;h3 id="system" class="paragraph-header">System &lt;a
href="#system">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>check updates: &lt;code>sudo apk update&lt;/code> and &lt;code>sudo apk upgrade -a&lt;/code>&lt;/li>
&lt;li>install some tools: &lt;code>sudo apk add htop curl nano&lt;/code>&lt;/li>
&lt;li>remove unnecessary apps: &lt;code>sudo apk del gnome-maps gnome-calculator gnome-software gnome-clocks gnome-calendar gnome-text-editor gnome-contacts gnome-weather chatty portfolio lollypop firefox-esr evince calls megapixels postmarketos-default-camera postmarketos-welcome loupe flatpak&lt;/code>&lt;/li>
&lt;li>list remaining packages: &lt;code>sudo apk list -I&lt;/code>&lt;/li>
&lt;li>disable unnecessary services: &lt;code>sudo rc-update del bluetooth&lt;/code> and &lt;code>sudo rc-update del modemmanager&lt;/code>&lt;/li>
&lt;li>list enabled services: &lt;code>sudo rc-update show&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="wireguard" class="paragraph-header">Wireguard &lt;a
href="#wireguard">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>install: &lt;code>sudo apk add wireguard-tools-wg-quick wireguard-tools-openrc&lt;/code>&lt;/li>
&lt;li>add wireguard config to &lt;code>/etc/wireguard/wg0.conf&lt;/code>, e.g.:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">[Interface]
PrivateKey = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Address = 192.168.178.204/24
DNS = 192.168.178.1
DNS = fritz.box
[Peer]
PublicKey = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
PresharedKey = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
AllowedIPs = 192.168.178.0/24,0.0.0.0/0
Endpoint = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.myfritz.net:12345
PersistentKeepalive = 25
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>fix permissions: &lt;code>sudo chmod o-r /etc/wireguard/wg0.conf&lt;/code>&lt;/li>
&lt;li>
&lt;a href="https://wiki.alpinelinux.org/wiki/Configure_a_Wireguard_interface_%28wg%29" target="_blank" rel="noopener noreferrer">autostart&lt;/a>:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo ln -s /etc/init.d/wg-quick /etc/init.d/wg-quick.wg0
sudo rc-update add wg-quick.wg0
sudo service wg-quick.wg0 start
&lt;/code>&lt;/pre>&lt;ol start="5">
&lt;li>manual start: &lt;code>sudo wg-quick up wg0&lt;/code>&lt;/li>
&lt;li>manual stop: &lt;code>sudo wg-quick down wg0&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="docker" class="paragraph-header">Docker &lt;a
href="#docker">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>install: &lt;code>sudo apk add docker&lt;/code> (alpine sources typically provide an up-to-date version)&lt;/li>
&lt;li>autostart: &lt;code>sudo rc-update add docker&lt;/code>&lt;/li>
&lt;li>start: &lt;code>sudo service docker start&lt;/code>&lt;/li>
&lt;li>the PinePhone can execute arm32v7 and also arm64v8 images&lt;/li>
&lt;/ol></description></item><item><title>SSH Tunneling</title><link>https://knrdl.github.io/posts/ssh-tunneling/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/ssh-tunneling/</guid><description>&lt;p>SSH allows tcp port forwarding between ssh client and ssh server as part of the encrypted ssh connection.&lt;/p>
&lt;h2 id="server--client-local" class="paragraph-header">Server → Client (local) &lt;a
href="#server--client-local">&lt;/a>&lt;/h2>
&lt;p>A socket on the server (source) gets forwarded to the client (target).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L target_ip:target_port:source_ip:source_port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-case-1-admin-software" class="paragraph-header">Use case 1: Admin software &lt;a
href="#use-case-1-admin-software">&lt;/a>&lt;/h3>
&lt;p>Server socket with port 9000 will be available on client machine at port 5000.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L 127.0.0.1:5000:127.0.0.1:9000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful if admin software is only accessible on the server (localhost binding) and not exposed to the network.&lt;/p>
&lt;h3 id="use-case-2-quick-demo" class="paragraph-header">Use Case 2: Quick demo &lt;a
href="#use-case-2-quick-demo">&lt;/a>&lt;/h3>
&lt;p>Server socket with port 9000 will be accessible at client network on port 8080 of the client machine.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L 8080:127.0.0.1:9000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh user@host -L 0.0.0.0:8080:127.0.0.1:9000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful for a quick demo of a service running in a different network (e.g. cloud) to multiple participants in the same
network (e.g. company).&lt;/p>
&lt;h3 id="use-case-3-jump-host" class="paragraph-header">Use case 3: Jump Host &lt;a
href="#use-case-3-jump-host">&lt;/a>&lt;/h3>
&lt;p>Server can reach host with ip addr 192.168.1.15. Service on 192.168.1.15:8080 will be available on client machine at
port 8081.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L 127.0.0.1:8081:192.168.1.15:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hop to hop forwarding of hosts accessible in the server network(s).&lt;/p>
&lt;h2 id="client--server-remote" class="paragraph-header">Client → Server (remote) &lt;a
href="#client--server-remote">&lt;/a>&lt;/h2>
&lt;p>A socket on the client (source) gets forwarded to the server (target).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -R target_port:source_ip:source_port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-case-1-microservice-development" class="paragraph-header">Use case 1: Microservice development &lt;a
href="#use-case-1-microservice-development">&lt;/a>&lt;/h3>
&lt;p>Service on port 8000 of the client machine will be available on server at port 8081. Unless &lt;code>GatewayPorts&lt;/code> is set
to &lt;code>yes&lt;/code> in sshd config (default &lt;code>no&lt;/code>) the serverside bind will always be localhost (127.0.0.1).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -R 8081:127.0.0.1:8000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful to integrate a microservice on developer machine into a foreign environment (e.g. test cluster). Also works with
other source addresses than &lt;code>127.0.0.1&lt;/code>.&lt;/p>
&lt;h3 id="use-case-2-tls-terminating-web-proxy-as-a-service" class="paragraph-header">Use case 2: TLS terminating web proxy as a service &lt;a
href="#use-case-2-tls-terminating-web-proxy-as-a-service">&lt;/a>&lt;/h3>
&lt;p>Client starts a http server on local machine on port 8000. That service will be available as
&lt;a href="https://server.tld" target="_blank" rel="noopener noreferrer">https://server.tld&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -R 8001:127.0.0.1:8000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Processing order:&lt;/p>
&lt;ol>
&lt;li>Webbrowser (User Agent) requests
&lt;a href="https://server.tld" target="_blank" rel="noopener noreferrer">https://server.tld&lt;/a>&lt;/li>
&lt;li>Reaches a reverse proxy on port 443
&lt;ul>
&lt;li>does tls termination&lt;/li>
&lt;li>and proxying, nginx: &lt;code>proxy_pass 127.0.0.1:8001;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SSH Tunnel&lt;/li>
&lt;li>local machine port 8000 http server&lt;/li>
&lt;/ol>
&lt;h2 id="ssh-config" class="paragraph-header">SSH Config &lt;a
href="#ssh-config">&lt;/a>&lt;/h2>
&lt;p>port forwarding can also be specified on the client in &lt;code>~/.ssh/config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Host server-01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HostName 192.168.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Port 22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User clusteradm
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3f4a">&lt;span> LocalForward localhost:9001 localhost:9000
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3f4a">&lt;span> RemoteForward 8001 localhost:8000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KeepAlive yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IdentitiesOnly yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IdentityFile ~/.ssh/server_01_clusteradm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Config format is &lt;code>(Local|Remote)Forward target source&lt;/code>&lt;/p>
&lt;p>connect via &lt;code>$ ssh server-01&lt;/code>&lt;/p>
&lt;h2 id="persistent-connections" class="paragraph-header">Persistent connections &lt;a
href="#persistent-connections">&lt;/a>&lt;/h2>
&lt;p>Just use the &lt;code>autossh&lt;/code> command in place of &lt;code>ssh&lt;/code>. AutoSSH uses heartbeats to check if the connection is still open and
open another one otherwise automatically and fully transparent.&lt;/p>
&lt;h2 id="dedicated-tunneling-server" class="paragraph-header">Dedicated tunneling server &lt;a
href="#dedicated-tunneling-server">&lt;/a>&lt;/h2>
&lt;p>It&amp;rsquo;s possible to run a standalone ssh server which just allows port forwarding and no remote command execution. Setup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir -p /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adduser --gecos &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span> --no-create-home --shell /bin/false --disabled-password --uid &lt;span style="color:#bd93f9">1000&lt;/span> sshtunnel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Excerpt from &lt;code>/etc/ssh/sshd_config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># AllowUsers list all users which should be able to login&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AllowUsers sshtunnel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Match User sshtunnel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTTY no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Banner none
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> X11Forwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowAgentForwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># AllowTcpForwarding: yes (= local+remote), local, remote, no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowTcpForwarding &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GatewayPorts no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTunnel no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChrootDirectory /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ForceCommand /bin/false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitOpen 127.0.0.1:8730
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Start sshd in foreground: &lt;code>$ sshd -D -e&lt;/code>&lt;/p>
&lt;p>Connect client: &lt;code>$ ssh -N -L 127.0.0.1:8730:127.0.0.1:8730 sshtunnel@localhost&lt;/code>&lt;/p>
&lt;p>Flag &lt;code>-N&lt;/code> prevents the spawning of a shell (which would result in a connection abortion otherwise).&lt;/p>
&lt;h2 id="rsync-tunneling-also-sftp" class="paragraph-header">Rsync tunneling (also sftp) &lt;a
href="#rsync-tunneling-also-sftp">&lt;/a>&lt;/h2>
&lt;p>&lt;code>rsync&lt;/code> can copy (sync) files between hosts. Therefore, it can use ssh as a transfer protocol. But that implies running
the rsync command on the server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rsync -av -e ssh user@host:/backup/ /datadir/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That won&amp;rsquo;t work with a tunneling only ssh server. Luckily rsync can also be operated with a standalone server, so the
rsync protocol can be tunneled via ssh.&lt;/p>
&lt;h3 id="server-setup" class="paragraph-header">Server Setup &lt;a
href="#server-setup">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>adduser --gecos &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span> --no-create-home --shell /bin/false --disabled-password --uid &lt;span style="color:#bd93f9">1001&lt;/span> rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkdir -p /jail/backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown -R root:root /jail &lt;span style="color:#6272a4"># user cannot have write permission to chroot dir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown -R rsyncbackup:rsyncbackup /jail/backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chmod -R &lt;span style="color:#bd93f9">755&lt;/span> /jail/backup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Excerpt from &lt;code>/etc/ssh/sshd_config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># allow sftp connections&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Subsystem sftp internal-sftp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># AllowUsers list all users which should be able to login&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AllowUsers rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Match User rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTTY no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Banner none
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> X11Forwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowAgentForwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># AllowTcpForwarding: yes (= local+remote), local, remote, no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowTcpForwarding &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GatewayPorts no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTunnel no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChrootDirectory /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ForceCommand internal-sftp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitOpen 127.0.0.1:8730
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition to rsync this config also allows file browsing via sftp in the &lt;code>/jail&lt;/code> dir.&lt;/p>
&lt;p>Rsync server config in &lt;code>/etc/rsyncd.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>use &lt;span style="color:#8be9fd;font-style:italic">chroot&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hosts &lt;span style="color:#8be9fd;font-style:italic">allow&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> 127.0.0.1/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">port&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">8730&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">timeout&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max &lt;span style="color:#8be9fd;font-style:italic">connections&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reverse &lt;span style="color:#8be9fd;font-style:italic">lookup&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log &lt;span style="color:#8be9fd;font-style:italic">file&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> /dev/stdout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log &lt;span style="color:#8be9fd;font-style:italic">format&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> %h %o %f %l %b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pid &lt;span style="color:#8be9fd;font-style:italic">file&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> /var/run/rsyncd.pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[&lt;/span>backup_sink&lt;span style="color:#ff79c6">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">comment&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> Backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">path&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">read&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">only&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">list&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">uid&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">gid&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> rsyncbackup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Start rsync server: &lt;code>$ rsync --daemon --config /etc/rsyncd.conf&lt;/code>&lt;/p>
&lt;h3 id="client-setup" class="paragraph-header">Client Setup &lt;a
href="#client-setup">&lt;/a>&lt;/h3>
&lt;p>Record in &lt;code>.ssh/config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> Host backup-conn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HostName 192.168.1.32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Port &lt;span style="color:#bd93f9">2201&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KeepAlive yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalForward 127.0.0.1:8730 127.0.0.1:8730
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run a rsync job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -N backup-conn &amp;amp; &lt;span style="color:#6272a4"># no tty possible, either use pubkey-auth or use sshpass to submit the password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">pid&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep &lt;span style="color:#bd93f9">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">time&lt;/span> rsync bigfile rsync://localhost:8730/backup_sink/backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">kill&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check that &lt;code>/jail/backup/bigfile&lt;/code> has been created on the server.&lt;/p></description></item></channel></rss>