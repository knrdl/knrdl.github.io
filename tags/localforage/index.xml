<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Localforage on knrdlog</title><link>https://knrdl.github.io/tags/localforage/</link><description>Recent content in Localforage on knrdlog</description><language>en-us</language><copyright>Licensed under &lt;a href='https://creativecommons.org/publicdomain/zero/1.0/' target='_blank' rel='noopener norefferer'>CC0 1.0&lt;/a> |
&lt;a href="https://gohugo.io" target='_blank' rel='noopener norefferer'>Hugo&lt;/a> theme inspired by &lt;a href="https://github.com/vamc19" target='_blank' rel='noopener norefferer'>vamc19&lt;/a> |
Hosted by &lt;a href="https://pages.github.com" target='_blank' rel='noopener norefferer'>Github&lt;/a> (&lt;a href="https://github.com/site/privacy" target='_blank' rel='noopener norefferer'>Privacy Policy&lt;/a>)</copyright><lastBuildDate>Fri, 06 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://knrdl.github.io/tags/localforage/index.xml" rel="self" type="application/rss+xml"/><item><title>LocalForage: Performant batch operations</title><link>https://knrdl.github.io/posts/indexeddb-localforage/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/indexeddb-localforage/</guid><description>&lt;h2 id="problem" class="paragraph-header">Problem &lt;a
href="#problem">&lt;/a>&lt;/h2>
&lt;p>
&lt;a href="https://github.com/localForage/localForage" target="_blank" rel="noopener noreferrer">LocalForage&lt;/a> is a thin wrapper around
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener noreferrer">IndexedDB&lt;/a> (and some fallbacks). IndexedDB is a NoSQL database API exposed by modern browsers. It allows storing JSON and blobs client-side. LocalForage simplifies interacting with IndexedDB by providing a simple key-value store as API instead. The method names are
&lt;a href="https://developer.mozilla.org/de/docs/Web/API/Window/localStorage" target="_blank" rel="noopener noreferrer">localStorage&lt;/a>-like: &lt;code>getItem()&lt;/code>, &lt;code>setItem()&lt;/code>, &lt;code>removeItem()&lt;/code> etc.&lt;/p>
&lt;p>However, batch operations (like a mass insert) are horribly slow when performed via LocalForage. That&amp;rsquo;s because LocalForage opens for every operation a new IndexedDB transaction and this action is remarkable time-consuming compared with other DBMS. So 1000 &lt;code>setItems()&lt;/code> open 1000 transactions which can take multiple seconds to proceed. As LocalForage doesn&amp;rsquo;t provide the API to do this in a single transaction, you need to write your own thin wrapper around IndexedDB and expose transactions as entity.&lt;/p>
&lt;h2 id="solution" class="paragraph-header">Solution &lt;a
href="#solution">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">export&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> kvDb(name: &lt;span style="color:#8be9fd">string&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;kvdb&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> openedDb: &lt;span style="color:#8be9fd">IDBDatabase&lt;/span> &lt;span style="color:#ff79c6">|&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> idbRequestToPromise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(request: &lt;span style="color:#8be9fd">IDBRequest&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Promise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;((resolve, reject) &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.onsuccess &lt;span style="color:#ff79c6">=&lt;/span> () &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> resolve(request.result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.onerror &lt;span style="color:#ff79c6">=&lt;/span> () &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> reject(request.error)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> openDb() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> dbRequest &lt;span style="color:#ff79c6">=&lt;/span> indexedDB.open(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbRequest.onupgradeneeded &lt;span style="color:#ff79c6">=&lt;/span> () &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbRequest.result.createObjectStore(&lt;span style="color:#f1fa8c">&amp;#39;kv-pairs&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(dbRequest)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * A transaction is autocommitted as soon as no new requests are made (!)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * All requests must be added in the same cycle of the event loop.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * The transaction cannot be used afterwards.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> transaction() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>openedDb) openedDb &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> openDb()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> openedDb.transaction(&lt;span style="color:#f1fa8c">&amp;#39;kv-pairs&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;readwrite&amp;#39;&lt;/span>).objectStore(&lt;span style="color:#f1fa8c">&amp;#39;kv-pairs&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">get&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(key: &lt;span style="color:#8be9fd">string&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>)&lt;span style="color:#ff79c6">:&lt;/span> Promise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> value: &lt;span style="color:#8be9fd">T&lt;/span> &lt;span style="color:#ff79c6">|&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.&lt;span style="color:#ff79c6">get&lt;/span>(key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (value &lt;span style="color:#ff79c6">===&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span>) &lt;span style="color:#ff79c6">throw&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Error&lt;/span>(&lt;span style="color:#f1fa8c">`db &amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>name&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34; key &amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>key&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34; not found`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> getDefault&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(key: &lt;span style="color:#8be9fd">string&lt;/span>, defaultValue: &lt;span style="color:#8be9fd">T&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>)&lt;span style="color:#ff79c6">:&lt;/span> Promise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> value: &lt;span style="color:#8be9fd">T&lt;/span> &lt;span style="color:#ff79c6">|&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.&lt;span style="color:#ff79c6">get&lt;/span>(key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (value &lt;span style="color:#ff79c6">===&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span>) &lt;span style="color:#ff79c6">return&lt;/span> defaultValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">set&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(key: &lt;span style="color:#8be9fd">string&lt;/span>, value: &lt;span style="color:#8be9fd">T&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.put(value, key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>(key: &lt;span style="color:#8be9fd">string&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.&lt;span style="color:#ff79c6">delete&lt;/span>(key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> clear(transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.clear())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As additional optimization the browser can be asked to persist the storage as long as possible:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> navigator.storage&lt;span style="color:#ff79c6">?&lt;/span>.persist&lt;span style="color:#ff79c6">?&lt;/span>.()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#ff79c6">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#f1fa8c">&amp;#39;navigator.storage.persist() failed:&amp;#39;&lt;/span>, e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="usage-example" class="paragraph-header">Usage example &lt;a
href="#usage-example">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> localCache &lt;span style="color:#ff79c6">=&lt;/span> kvDb(&lt;span style="color:#f1fa8c">&amp;#39;cache&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Without transaction (slow on batch):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.clear() &lt;span style="color:#6272a4">// clear cache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.&lt;span style="color:#ff79c6">set&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;object1&amp;#39;&lt;/span>, {hello&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;world&amp;#39;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.&lt;span style="color:#ff79c6">get&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;object1&amp;#39;&lt;/span>) &lt;span style="color:#6272a4">// = {hello: &amp;#39;world&amp;#39;}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.getDefault(&lt;span style="color:#f1fa8c">&amp;#39;object2&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;fallback&amp;#39;&lt;/span>) &lt;span style="color:#6272a4">// = &amp;#39;fallback&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.&lt;span style="color:#ff79c6">delete&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;object1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// With transaction (fast on batch):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> transaction &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> localCache.transaction()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">await&lt;/span> Promise.allSettled(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">Array&lt;/span>.&lt;span style="color:#ff79c6">from&lt;/span>(&lt;span style="color:#8be9fd;font-style:italic">Array&lt;/span>(&lt;span style="color:#bd93f9">1000&lt;/span>).keys()).map(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> i &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> localCache.&lt;span style="color:#ff79c6">set&lt;/span>(&lt;span style="color:#f1fa8c">`file-&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>i&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">`&lt;/span>, &lt;span style="color:#ff79c6">await&lt;/span> loadFile(i), transaction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Gotchas:&lt;/strong> A transaction can only be used once with
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener noreferrer">&lt;code>Promise.all()&lt;/code>&lt;/a> or
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled" target="_blank" rel="noopener noreferrer">&lt;code>Promise.allSettled()&lt;/code>&lt;/a>. Using the same transaction in multiple consecutive statements is not possible (thanks to the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction#:~:text=A%20transaction%20alternates%20between%20active%20and%20inactive%20states%20between%20event%20loop%20tasks." target="_blank" rel="noopener noreferrer">weird IndexedDB design&lt;/a>).&lt;/p></description></item></channel></rss>