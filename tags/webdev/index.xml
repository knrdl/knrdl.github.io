<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>webdev on knrdlog</title><link>https://knrdl.github.io/tags/webdev/</link><description>Recent content in webdev on knrdlog</description><language>en-us</language><copyright>Licensed under &lt;a href='https://creativecommons.org/publicdomain/zero/1.0/' target='_blank' rel='noopener norefferer'>CC0 1.0&lt;/a> |
&lt;a href="https://gohugo.io" target='_blank' rel='noopener norefferer'>Hugo&lt;/a> theme inspired by &lt;a href="https://github.com/vamc19" target='_blank' rel='noopener norefferer'>vamc19&lt;/a> |
Hosted by &lt;a href="https://pages.github.com" target='_blank' rel='noopener norefferer'>Github&lt;/a> (&lt;a href="https://github.com/site/privacy" target='_blank' rel='noopener norefferer'>Privacy Policy&lt;/a>)</copyright><lastBuildDate>Tue, 20 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://knrdl.github.io/tags/webdev/index.xml" rel="self" type="application/rss+xml"/><item><title>Password-protected resources on static-site webhosters</title><link>https://knrdl.github.io/posts/password-protected-static-sites/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/password-protected-static-sites/</guid><description>&lt;h2 id="scenario" class="paragraph-header">Scenario &lt;a
href="#scenario">&lt;/a>&lt;/h2>
&lt;p>Some web hosters only serve static files and allow no config changes to the webserver. But maybe you want to provide files which are not intended for public view, for example sharing a file with a friend. Therefore, the best you can do is protecting files by giving them names which are hard to guess. Obviously these files should also not be linked somewhere publicly at all.&lt;/p>
&lt;p>This concept can be expanded with a clientside-only authentication mechanism, as described next.&lt;/p>
&lt;h2 id="login-process" class="paragraph-header">Login process &lt;a
href="#login-process">&lt;/a>&lt;/h2>
&lt;h3 id="1-the-user-opens-the-webpage" class="paragraph-header">1. The user opens the webpage &lt;a
href="#1-the-user-opens-the-webpage">&lt;/a>&lt;/h3>
&lt;p>A login dialog with password input is shown to the user. The user inputs a password.&lt;/p>
&lt;div style="text-align: center; font-size: 20pt">
&lt;a href="demo" target="_blank">&amp;gt;&amp;gt; click here for a demo &amp;lt;&amp;lt;&lt;/a>
&lt;/div>
&lt;h3 id="2-clientside-password-hashing" class="paragraph-header">2. Clientside password hashing &lt;a
href="#2-clientside-password-hashing">&lt;/a>&lt;/h3>
&lt;p>Now the password must be locally digested on the webpage. A hashing algorithm suitable for passwords must be applied. PBKDF2 as provided by the WebCryptoAPI is acceptable with an
&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html" target="_blank" rel="noopener noreferrer">iteration count of 310,000&lt;/a> in HMAC-SHA-256 mode. The hash should be salted with
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params" target="_blank" rel="noopener noreferrer">at least 16 bytes of randomness&lt;/a>. The salt can be stored as plaintext alongside the login page. Generating a salt is as easy as &lt;code>dd if=/dev/urandom bs=1 count=16 | base64&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/** clientside hashing a password
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @param {string} password - as provided by user
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @param {string} salt - as base64 encoded
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @return {Promise&amp;lt;string&amp;gt;} - the hash value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> hashPassword(password, salt) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> passwordKey &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.crypto.subtle.importKey(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;raw&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">new&lt;/span> TextEncoder().encode(password),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {name&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;PBKDF2&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">false&lt;/span>, &lt;span style="color:#6272a4">// key should not be extractable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> [&lt;span style="color:#f1fa8c">&amp;#34;deriveBits&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> hashBuffer &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.crypto.subtle.deriveBits(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#f1fa8c">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;PBKDF2&amp;#34;&lt;/span>, salt&lt;span style="color:#ff79c6">:&lt;/span> base64ToArrayBuffer(salt), &lt;span style="color:#f1fa8c">&amp;#34;iterations&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#bd93f9">310_000&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;hash&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;SHA-256&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> passwordKey,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bd93f9">256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> hashArray &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Array&lt;/span>.from(&lt;span style="color:#ff79c6">new&lt;/span> Uint8Array(hashBuffer))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> hashArray.map(b =&amp;gt; b.toString(&lt;span style="color:#bd93f9">16&lt;/span>).padStart(&lt;span style="color:#bd93f9">2&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;0&amp;#39;&lt;/span>)).join(&lt;span style="color:#f1fa8c">&amp;#39;&amp;#39;&lt;/span>).toUpperCase()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/** converts a base64 encoded string into an arraybuffer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @param {string} base64text
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @return {ArrayBuffer}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> base64ToArrayBuffer(base64text) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> bytes &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Uint8Array(base64text.length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> base64text.length; i&lt;span style="color:#ff79c6">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bytes[i] &lt;span style="color:#ff79c6">=&lt;/span> base64text.charCodeAt(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> bytes.buffer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-redirect-to-the-secret-path" class="paragraph-header">3. Redirect to the secret path &lt;a
href="#3-redirect-to-the-secret-path">&lt;/a>&lt;/h3>
&lt;p>The created hash-value is taken as a path parameter for the url. As UX improvement, a preflight fetch request checks if the entered password is correct. If that&amp;rsquo;s the case, a redirect is performed. The user is now authenticated.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> password &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">document&lt;/span>.querySelector(&lt;span style="color:#f1fa8c">&amp;#39;input[type=password]&amp;#39;&lt;/span>).value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> salt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;ChangeTheSaltValueASAP==&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> hashValue &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> hashPassword(password, salt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> url &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.location.origin &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.location.pathname &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> hashValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fetch(url).then(&lt;span style="color:#ff79c6">async&lt;/span> res =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res.ok)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.location.replace(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">throw&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Error&lt;/span>(&lt;span style="color:#ff79c6">await&lt;/span> res.text())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}).&lt;span style="color:#ff79c6">catch&lt;/span>(err =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alert(&lt;span style="color:#f1fa8c">&amp;#39;Password wrong&amp;#39;&lt;/span>) &lt;span style="color:#6272a4">// todo: evaluate error msg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p class="info">It&amp;rsquo;s possible to create user specific protected paths by concatenating the static salt with a provided additional userID. That way separate accounts with userID and password as credentials would be possible.&lt;/p>
&lt;/blockquote>
&lt;h2 id="pros" class="paragraph-header">Pros &lt;a
href="#pros">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>As the calculation-heavy hashing is performed exclusively clientside, there is no extra load serverside. For better scalability this approach can even be combined with a CDN.&lt;/li>
&lt;li>A Static Site Generator (SSG), like Hugo, can be used to automatically generate protected resource paths from predefined passwords. The SSG only needs to perform hashing on creation of a new protected resource.&lt;/li>
&lt;li>The hashing works as key stretching operation to generate urls which are long enough to be unsearchable.
A brute-force attacker who can perform a billion requests per second would need &lt;math>
&lt;msup>
&lt;mi>2&lt;/mi>
&lt;mrow>
&lt;mn>256&lt;/mn>
&lt;/mrow>
&lt;/msup>
&lt;mo>/&lt;/mo>
&lt;msup>
&lt;mi>10&lt;/mi>
&lt;mrow>
&lt;mn>9&lt;/mn>
&lt;/mrow>
&lt;/msup>
&lt;mo>≈&lt;/mo>
&lt;msup>
&lt;mi>10&lt;/mi>
&lt;mrow>
&lt;mn>60&lt;/mn>
&lt;/mrow>
&lt;/msup> &lt;mi> years&lt;/mi>
&lt;/math>. That way a bruteforce attack for the passwords still is the most efficient one.&lt;/li>
&lt;li>The user can bookmark protected resource paths, so there is no further login required (ux improvement).&lt;/li>
&lt;/ul>
&lt;h2 id="cons" class="paragraph-header">Cons &lt;a
href="#cons">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>The approach doesn&amp;rsquo;t scale well for many user. As a workaround there might be group-contents defined and each &amp;ldquo;user protected path&amp;rdquo; just contains a redirect to the &amp;ldquo;group protected path&amp;rdquo;. Otherwise, there will be a lot of duplication.&lt;/li>
&lt;li>A dynamic creation of user accounts is not possible. But as it&amp;rsquo;s all about static hosting, this is out of scope.&lt;/li>
&lt;li>Users can give unintentional access to third parties by just copypasting the url. Maybe it&amp;rsquo;s possible to cloak the shown url with a combination of the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noopener noreferrer">History API&lt;/a>&amp;rsquo;s &lt;code>replaceState&lt;/code> and the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base" target="_blank" rel="noopener noreferrer">base tag&lt;/a>? Or just provide the protected content as &lt;abbr title="Single Page Application">SPA&lt;/abbr> with a rewritten display url.&lt;/li>
&lt;li>The secret key must be transported as part of the url to the server. That way sensitive information will be written into the access logfiles of webserver and proxies. This violates security goals and is definitely not best practice!&lt;/li>
&lt;li>Accidentally enabling public
&lt;a href="https://nginx.org/en/docs/http/ngx_http_autoindex_module.html" target="_blank" rel="noopener noreferrer">directory listings&lt;/a> will also break any security goals apart.&lt;/li>
&lt;li>There is a tradeoff between hashing duration and security. The WebCryptoAPI allows hashing to be performant but only implements PBKDF2. A js/wasm library might provide a better algorithm but perhaps unsatisfying performance. It&amp;rsquo;s a pity that the WebCryptoAPI doesn&amp;rsquo;t support a more elaborated password hashing algorithm, e.g. bcrypt, scrypt, argon2id.&lt;/li>
&lt;li>There is no ratelimiting applicable: A brute force attacker is only limited by the network transmission time and calculation cost for a password hash, which can both be heavily parallelized. As a result the password must be strong enough, e.g. not trivially constructable from password-list permutations.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion" class="paragraph-header">Conclusion &lt;a
href="#conclusion">&lt;/a>&lt;/h2>
&lt;p>Is it possible? Yes, absolutely! And should we implement this? Please don&amp;rsquo;t, if it&amp;rsquo;s avoidable in any way. The explained approach is only useful in a very specific scenario (see above). In almost all cases there would be a more standard-applying way to realize that, for example using good old HTTP Basic Auth. Or initiate a session after login instead, so there is no further exchange of highly privileged key material (user credentials) required.&lt;/p></description></item><item><title>The magic world of HTML inputs</title><link>https://knrdl.github.io/posts/html5-input-elements/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/html5-input-elements/</guid><description>&lt;p>The HTML &lt;code>input&lt;/code> element is the principal construct when it comes to site local interactivity from user provided data on the web. Here are my 5 cents to the topic.&lt;/p>
&lt;h2 id="button-tag" class="paragraph-header">Button Tag &lt;a
href="#button-tag">&lt;/a>&lt;/h2>
&lt;p>There is a &lt;code>&amp;lt;input type=&amp;quot;button&amp;quot;&amp;gt;&lt;/code>. However, it only allows unformatted text as button content. Use &lt;code>&amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;&lt;/code> instead. The &lt;code>type=&amp;quot;button&amp;quot;&lt;/code> might seems redundant, but it prevents browsers from interpreting the button as &lt;code>type=&amp;quot;submit&amp;quot;&lt;/code> if there is only one button in a &lt;code>&amp;lt;form&amp;gt;&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;simple button&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">button&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;button&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">span&lt;/span> &lt;span style="color:#50fa7b">style&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;color:orange&amp;#34;&lt;/span>&amp;gt;styled button&amp;lt;/&lt;span style="color:#ff79c6">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;input type="button" value="simple button">
&lt;button type="button">
&lt;span style="color:orange">styled button&lt;/span>
&lt;/button>
&lt;h2 id="example-values-are-no-placeholders" class="paragraph-header">Example values are no placeholders! &lt;a
href="#example-values-are-no-placeholders">&lt;/a>&lt;/h2>
&lt;p>Providing the attribute &lt;code>placeholder&lt;/code> is a good idea. But it&amp;rsquo;s easy for users to mistake placeholders for actual values. For example: What is the selected limit value here?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>Wrong: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;100&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Correct with default: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;limit&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;100&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Correct without default: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;limit&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>Wrong: &lt;input type="number" placeholder="100" value="">&lt;/div>
&lt;div>Correct with default: &lt;input type="number" placeholder="limit" value="100">&lt;/div>
&lt;div>Correct without default: &lt;input type="number" placeholder="limit" value="">&lt;/div>
&lt;blockquote>
&lt;p class="info">Using actual values as placeholders is only a good idea, if the chosen value is always the default value. If there is no default, don&amp;rsquo;t misuse an example value as a placeholder!&lt;/p>
&lt;/blockquote>
&lt;h2 id="use-the-system-picker" class="paragraph-header">Use the system picker &lt;a
href="#use-the-system-picker">&lt;/a>&lt;/h2>
&lt;p>Often the first idea to create date or color pickers is to use one of the dozen available npm-modules. But these solutions offer no system integration and tend to be hacky or misfitting on mobile screens. Instead, the html5 elements provide quite an acceptable user experience on all modern devices.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>Date input: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;date&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;2022-01-01&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Time input: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;time&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;14:00&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Color input: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;color&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;#123456&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>Date input: &lt;input type="date" value="2022-01-01">&lt;/div>
&lt;div>Time input: &lt;input type="time" value="03:00">&lt;/div>
&lt;div>Color input: &lt;input type="color" value="#123456">&lt;/div>
&lt;p>It&amp;rsquo;s even possible to use the picker dialog without the corresponding input field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">button&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">onclick&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;document.getElementById(&amp;#39;date-input&amp;#39;).showPicker()&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;date&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">style&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;position: absolute; visibility: hidden;&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">id&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;date-input&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 📆 Select a date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;button type="button" onclick="document.getElementById('date-input').showPicker()">
&lt;input type="date" style="position: absolute; visibility: hidden;" id="date-input">
📆 Select a date
&lt;/button>
&lt;h2 id="autocomplete" class="paragraph-header">Autocomplete &lt;a
href="#autocomplete">&lt;/a>&lt;/h2>
&lt;p>Autocompleting text is pretty easy as well. However, if more sophisticated suggestions are required (formatted text, images, &amp;hellip;) then you will have to build it on your own.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">list&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;autocomplete-values&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Search a location&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">datalist&lt;/span> &lt;span style="color:#50fa7b">id&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;autocomplete-values&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Berlin&amp;#34;&lt;/span>&amp;gt;Berlin&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Hamburg&amp;#34;&lt;/span>&amp;gt;Hamburg&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Munich&amp;#34;&lt;/span>&amp;gt;Munich&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">datalist&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;input list="autocomplete-values" placeholder="Search a location">
&lt;datalist id="autocomplete-values">
&lt;option value="Berlin">Berlin&lt;/option>
&lt;option value="Hamburg">Hamburg&lt;/option>
&lt;option value="Munich">Munich&lt;/option>
&lt;/datalist>
&lt;blockquote>
&lt;p class="warning">Old browsers might perform a startswith-search instead of a contains-search to provide completion results!&lt;/p>
&lt;/blockquote>
&lt;p>Autocomplete suggestions can be updated dynamically. With Svelte it might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-svelte" data-lang="svelte">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">datalist&lt;/span> &lt;span style="color:#50fa7b">id&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;list-id&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#ff79c6">#each&lt;/span> items &lt;span style="color:#ff79c6">as&lt;/span> item}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>{item}&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&amp;gt;{item}&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#ff79c6">/each&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">datalist&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="take-advantage-of-semantics" class="paragraph-header">Take advantage of semantics &lt;a
href="#take-advantage-of-semantics">&lt;/a>&lt;/h2>
&lt;p>HTML is a semantic markup language. While &lt;code>&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code> works, it&amp;rsquo;s sometimes not the best fit:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;password&amp;quot; autocomplete=&amp;quot;new-password&amp;quot;&amp;gt;&lt;/code> allows the browser to generate and store secure passwords&lt;/li>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;password&amp;quot; autocomplete=&amp;quot;current-password&amp;quot;&amp;gt;&lt;/code> allows the browser to autofill a stored password&lt;/li>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt;&lt;/code> allows the browser to display a phone number keypad&lt;/li>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;search&amp;quot;&amp;gt;&lt;/code> allows the user to define a custom keyword as additional search engine for the browser&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Use labels to combine input description and control element:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">label&lt;/span>&amp;gt;Select a value:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;range&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;label>Select a value:
&lt;input type="range">
&lt;/label>&lt;/p>
&lt;h2 id="input-validation" class="paragraph-header">Input Validation &lt;a
href="#input-validation">&lt;/a>&lt;/h2>
&lt;h3 id="1-define-constraints" class="paragraph-header">1. Define Constraints &lt;a
href="#1-define-constraints">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">form&lt;/span> &lt;span style="color:#50fa7b">class&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;validate&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">pattern&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;[^@]+@\w+\.\w+&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;url&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">pattern&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;^https?://.+&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">minlength&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">maxlength&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;8&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">pattern&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;\w+&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">min&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">max&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;1000&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-visual-feedback" class="paragraph-header">2. Visual Feedback &lt;a
href="#2-visual-feedback">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">form&lt;/span>.&lt;span style="color:#50fa7b">validate&lt;/span> &lt;span style="color:#ff79c6">input&lt;/span>:invalid {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">border&lt;/span>: &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#8be9fd">px&lt;/span> &lt;span style="color:#ff79c6">solid&lt;/span> &lt;span style="color:#ff79c6">red&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">form&lt;/span>.&lt;span style="color:#50fa7b">validate&lt;/span> &lt;span style="color:#ff79c6">input&lt;/span>:valid {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">border&lt;/span>: &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#8be9fd">px&lt;/span> &lt;span style="color:#ff79c6">solid&lt;/span> &lt;span style="color:#ff79c6">black&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keep in mind that controls like &lt;code>&amp;lt;textare&amp;gt;&lt;/code> or &lt;code>&amp;lt;select&amp;gt;&lt;/code> also use the pseudo-selectors &lt;code>:valid&lt;/code> and &lt;code>:invalid&lt;/code>. They can be combined with e.g. &lt;code>:required&lt;/code> or &lt;code>:focus&lt;/code>.&lt;/p>
&lt;h3 id="3-provide-custom-error-messages" class="paragraph-header">3. Provide custom error messages &lt;a
href="#3-provide-custom-error-messages">&lt;/a>&lt;/h3>
&lt;p>Either via
&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#validating_forms_using_javascript" target="_blank" rel="noopener noreferrer">JavaScript&lt;/a> or via
&lt;a href="https://css-tricks.com/snippets/css/form-validation-styling-on-input-focus/" target="_blank" rel="noopener noreferrer">CSS&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p class="warning">Clientside form validation is an improvement to the user experience but no security measure. All user provided data must be sanitized and strictly validated serverside.&lt;/p>
&lt;/blockquote>
&lt;h2 id="multimedia" class="paragraph-header">Multimedia &lt;a
href="#multimedia">&lt;/a>&lt;/h2>
&lt;p>The file picker &lt;code>&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&lt;/code> can be used to take photos or videos on mobile devices:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;file&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">onchange&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;addPhotos(this.files)&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">accept&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;image/*&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">multiple&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;multiple&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;file&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">onchange&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;addVideos(this.files)&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">accept&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;video/*&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">multiple&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;multiple&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="foobar" class="paragraph-header">Foobar &lt;a
href="#foobar">&lt;/a>&lt;/h2>
&lt;p>&lt;code>&amp;lt;input type=&amp;quot;image&amp;quot;&amp;gt;&lt;/code> is much like &lt;code>&amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code>, except that it also transmits the xy coordinates where the user clicked on the image. This could be used e.g. to zoom in on a geo map &lt;em>without any javascript&lt;/em>. Click on the image below and watch the url parameter.&lt;/p>
&lt;form>
&lt;input type="image" src="https://tile.openstreetmap.org/11/1098/674.png" width="256" height="256">
&lt;/form>
&amp;copy; OpenStreetMap contributors</description></item><item><title>How to make your program generate pdf files</title><link>https://knrdl.github.io/posts/pdf-rendering/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/pdf-rendering/</guid><description>&lt;p>PDF files are still highly popular. The user will find all information in a single, human-readable file which is quite durable.
However, the programmatic generation of pdf files can be a bit tricky. A rendering engine is needed to transform the source data into the target pdf file. The source data can be broken up into two parts: templates and dynamic data. The template is a skeleton of the pdf document. It contains static texts, images, styling and positioning rules etc. It also contains field definitions where the dynamic data will be filled in. The process of merging template and dynamic data is done by a templating engine.&lt;/p>
&lt;p>There are multiple technologies applicable.&lt;/p>
&lt;h2 id="office-suites" class="paragraph-header">Office Suites &lt;a
href="#office-suites">&lt;/a>&lt;/h2>
&lt;p>It&amp;rsquo;s pretty easy to generate a pdf file by using an office suite like LibreOffice or Google Docs. It&amp;rsquo;s even possible to automate this with a headless LibreOffice instance. But working with
&lt;a href="https://de.wikipedia.org/wiki/OpenDocument" target="_blank" rel="noopener noreferrer">OpenDocument&lt;/a> files as templates for the pdf creation is not developer friendly (e.g. no git diffs &amp;hellip;). The implementation will be extra hard if the dynamic data also include complicated stuff like styling directives. On the other hand templates might be maintained in a WYSIWYG manner with user know software (basically just the office suite).&lt;/p>
&lt;h2 id="programmatic-drawing" class="paragraph-header">Programmatic drawing &lt;a
href="#programmatic-drawing">&lt;/a>&lt;/h2>
&lt;p>Drawing and writing elements programmatically on the pdf canvas is a pragmatic approach. The template is just a regular pdf file with some blanks. While this approach definitely works for simple documents, it gets harder with increasing document complexity. For example necessary line breaks and text alignments are easy to get wrong. In the long run a more sophisticated approach will be easier to handle.&lt;/p>
&lt;h2 id="latex" class="paragraph-header">Latex &lt;a
href="#latex">&lt;/a>&lt;/h2>
&lt;p>Latex is an extremely powerful and function-rich text processor which can also generate pdf files, of course. Using latex files as templates is also pretty easy because it is just text containing latex rules. The maintainers of the templates must be able to work with latex files, which could be quite a restriction. They need to learn latex first.&lt;/p>
&lt;blockquote>
&lt;p class="warning">The dynamic input is arbitrary data. To prevent &lt;strong>Latex Injections&lt;/strong> the templating engine must escape all dynamic input. Otherwise, an attacker might tamper the generated pdf file or even execute commands on your server (e.g. when the latex flag &lt;code>-shell-escape&lt;/code> is set)!&lt;/p>
&lt;/blockquote>
&lt;p>PDF generation using latex is a solid and well-tested approach.&lt;/p>
&lt;h2 id="webbrowsers" class="paragraph-header">Webbrowsers &lt;a
href="#webbrowsers">&lt;/a>&lt;/h2>
&lt;p>Webbrowsers can render the DOM (web content) of a webpage to a pdf file. This function is regularly exposed in the user interface. It&amp;rsquo;s also available via JavaScript as e.g. &lt;code>window.print()&lt;/code>. However, this is still manual and based on user interaction.&lt;/p>
&lt;p>But a headless browser engine (typically firefox or chromium) can also be executed in the backend. An adapter, called webdriver, is needed to control such an instance, e.g. Selenium, PhantomJs (deprecated) or Puppeteer. Now it&amp;rsquo;s possible to get a pdf via the webdriver out of the headless browser. Keep in mind that it takes some time to spin up a browser instance, fully load and render the webpage and then generate the pdf.&lt;/p>
&lt;p>This approach is really developer (especially web-developer) friendly. Templates might be maintained via a WYSIWYG webpage editor.&lt;/p>
&lt;p>Problematic is the potentially high resource usage of a browser engine. Running too many parallel rendering jobs at the same time can eat up the servers resources. To prevent this a job queue should be used in conjunction with a limited number of parallel executors.&lt;/p>
&lt;h2 id="pseudo-webbrowsers" class="paragraph-header">Pseudo Webbrowsers &lt;a
href="#pseudo-webbrowsers">&lt;/a>&lt;/h2>
&lt;p>Full-featured browser engines like firefox and chromium are powerful but (relatively) slow. There are engines which only implement a subset of the web standards (e.g. only HTML4 with some CSS3 rules) but have a significant higher throughput and less resource usage. Examples are
&lt;a href="https://weasyprint.org/" target="_blank" rel="noopener noreferrer">WeasyPrint&lt;/a> and
&lt;a href="https://xhtml2pdf.readthedocs.io/" target="_blank" rel="noopener noreferrer">xhtml2pdf&lt;/a>. The downside of this approach is that due to the non-standard conforming behaviour each engine interprets the html and css rules differently. So the templates will not be portable. It might also be difficult to figure out how the engine actually interprets positioning and styling rules.&lt;/p></description></item><item><title>Svelte: Warn user when caps lock is active</title><link>https://knrdl.github.io/posts/svelte-caps-lock/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/svelte-caps-lock/</guid><description>&lt;p>Useful when webpage contains password inputs&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-svelte" data-lang="svelte">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">script&lt;/span> &lt;span style="color:#50fa7b">lang&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;ts&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> warnCapsLockOn: &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> checkCapsLock(e: &lt;span style="color:#8be9fd">KeyboardEvent&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> warnCapsLockOn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">!!&lt;/span>e.getModifierState(&lt;span style="color:#f1fa8c">&amp;#34;CapsLock&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">svelte:body&lt;/span> &lt;span style="color:#50fa7b">on:keyup&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>{checkCapsLock}&lt;span style="color:#f1fa8c">/&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ff79c6">#if&lt;/span> warnCapsLockOn}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">div&lt;/span> &lt;span style="color:#50fa7b">class&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;text-danger&amp;#34;&lt;/span>&amp;gt;Attention, caps lock on!&amp;lt;/&lt;span style="color:#ff79c6">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ff79c6">/if&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>