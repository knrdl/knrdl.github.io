<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>knrdlog</title><link>https://knrdl.github.io/</link><description>Recent content on knrdlog</description><language>en-us</language><copyright>Licensed under &lt;a href='https://creativecommons.org/publicdomain/zero/1.0/' target='_blank' rel='noopener norefferer'>CC0 1.0&lt;/a> |
&lt;a href="https://gohugo.io" target='_blank' rel='noopener norefferer'>Hugo&lt;/a> theme inspired by &lt;a href="https://github.com/vamc19" target='_blank' rel='noopener norefferer'>vamc19&lt;/a> |
Hosted by &lt;a href="https://pages.github.com" target='_blank' rel='noopener norefferer'>Github&lt;/a> (&lt;a href="https://github.com/site/privacy" target='_blank' rel='noopener norefferer'>Privacy Policy&lt;/a>)</copyright><lastBuildDate>Fri, 20 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://knrdl.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>PinePhone as edge server in a remote network</title><link>https://knrdl.github.io/posts/pinephone-edge-server/</link><pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/pinephone-edge-server/</guid><description>&lt;p>The straight forward way to access a remote network is to setup a VPN connection with the router. If that&amp;rsquo;s not possible, a separate device is required to act as VPN client. A smartphone is particularly suitable for this as it is always on, small, has a low power consumption and makes it easy to configure a wifi connection with the network. The PinePhone is especially suitable for the job as it can host a standard Linux environment which is not messed up like Android. On the PinePhone we need very few tools to work in the remote network:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Wireguard&lt;/strong> for the VPN tunnel&lt;/li>
&lt;li>&lt;strong>SSH&lt;/strong> server&lt;/li>
&lt;li>&lt;strong>Docker&lt;/strong> runtime, e.g. to run a time series database to collect sensor stats&lt;/li>
&lt;/ol>
&lt;h2 id="setup" class="paragraph-header">Setup &lt;a
href="#setup">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>flash PostmarketOS to a microSD card&lt;/li>
&lt;li>run the wizard on the phone (to resize the root partition)&lt;/li>
&lt;li>copy the PostmarketOS img-file to the microSD card&lt;/li>
&lt;li>flash the img-file to the eMMC via &lt;code>dd&lt;/code>:
&lt;a href="https://pine64.org/documentation/PinePhone/Installation/Installation_to_the_eMMC/#from-the-booted-microsd-os" target="_blank" rel="noopener noreferrer">https://pine64.org/documentation/PinePhone/Installation/Installation_to_the_eMMC/#from-the-booted-microsd-os&lt;/a>&lt;/li>
&lt;li>remove the sd card and reboot&lt;/li>
&lt;li>login (user:147147) and connect wifi&lt;/li>
&lt;/ol>
&lt;h3 id="ssh" class="paragraph-header">SSH &lt;a
href="#ssh">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>start ssh server: &lt;code>sudo service sshd start&lt;/code>&lt;/li>
&lt;li>enable ssh on boot: &lt;code>sudo rc-update add sshd&lt;/code>&lt;/li>
&lt;li>connect to the phone: &lt;code>ssh user@pine64-pinephone&lt;/code>&lt;/li>
&lt;li>in &lt;code>/etc/ssh/sshd_config&lt;/code>: set &lt;code>AllowTcpForwarding yes&lt;/code> to forward ports from the remote network to your local host&lt;/li>
&lt;/ol>
&lt;h3 id="system" class="paragraph-header">System &lt;a
href="#system">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>check updates: &lt;code>sudo apk update&lt;/code> and &lt;code>sudo apk upgrade -a&lt;/code>&lt;/li>
&lt;li>install some tools: &lt;code>sudo apk add htop curl nano&lt;/code>&lt;/li>
&lt;li>remove unnecessary apps: &lt;code>sudo apk del gnome-maps gnome-calculator gnome-software gnome-clocks gnome-calendar gnome-text-editor gnome-contacts gnome-weather chatty portfolio lollypop firefox-esr evince calls megapixels postmarketos-default-camera postmarketos-welcome loupe flatpak&lt;/code>&lt;/li>
&lt;li>list remaining packages: &lt;code>sudo apk list -I&lt;/code>&lt;/li>
&lt;li>disable unnecessary services: &lt;code>sudo rc-update del bluetooth&lt;/code> and &lt;code>sudo rc-update del modemmanager&lt;/code>&lt;/li>
&lt;li>list enabled services: &lt;code>sudo rc-update show&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="wireguard" class="paragraph-header">Wireguard &lt;a
href="#wireguard">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>install: &lt;code>sudo apk add wireguard-tools-wg-quick wireguard-tools-openrc&lt;/code>&lt;/li>
&lt;li>add wireguard config to &lt;code>/etc/wireguard/wg0.conf&lt;/code>, e.g.:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">[Interface]
PrivateKey = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Address = 192.168.178.204/24
DNS = 192.168.178.1
DNS = fritz.box
[Peer]
PublicKey = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
PresharedKey = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
AllowedIPs = 192.168.178.0/24,0.0.0.0/0
Endpoint = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.myfritz.net:12345
PersistentKeepalive = 25
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>fix permissions: &lt;code>sudo chmod o-r /etc/wireguard/wg0.conf&lt;/code>&lt;/li>
&lt;li>
&lt;a href="https://wiki.alpinelinux.org/wiki/Configure_a_Wireguard_interface_%28wg%29" target="_blank" rel="noopener noreferrer">autostart&lt;/a>:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo ln -s /etc/init.d/wg-quick /etc/init.d/wg-quick.wg0
sudo rc-update add wg-quick.wg0
sudo service wg-quick.wg0 start
&lt;/code>&lt;/pre>&lt;ol start="5">
&lt;li>manual start: &lt;code>sudo wg-quick up wg0&lt;/code>&lt;/li>
&lt;li>manual stop: &lt;code>sudo wg-quick down wg0&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="docker" class="paragraph-header">Docker &lt;a
href="#docker">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>install: &lt;code>sudo apk add docker&lt;/code> (alpine sources typically provide an up-to-date version)&lt;/li>
&lt;li>autostart: &lt;code>sudo rc-update add docker&lt;/code>&lt;/li>
&lt;li>start: &lt;code>sudo service docker start&lt;/code>&lt;/li>
&lt;li>the PinePhone can execute arm32v7 and also arm64v8 images&lt;/li>
&lt;/ol></description></item><item><title>How to use IBM DB2 with async python</title><link>https://knrdl.github.io/posts/db2-async-python/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/db2-async-python/</guid><description>&lt;h2 id="async-python" class="paragraph-header">Async Python &lt;a
href="#async-python">&lt;/a>&lt;/h2>
&lt;p>Async frameworks are nowadays the standard for web development with python.
&lt;a href="https://fastapi.tiangolo.com/" target="_blank" rel="noopener noreferrer">FastAPI&lt;/a> didn&amp;rsquo;t invent it, but is currently the most successful and popular web framework offering it. With the increasing popularity of async, the need for async libraries grew over time. Python&amp;rsquo;s standard library is sync only for historic reasons. So
&lt;a href="https://github.com/aio-libs" target="_blank" rel="noopener noreferrer">async packages filled the gap&lt;/a> and sometimes replaced the old sync libraries, e.g.:&lt;/p>
&lt;ul>
&lt;li>DNS:
&lt;a href="https://docs.python.org/3/library/socket.html" target="_blank" rel="noopener noreferrer">std socket&lt;/a> &lt;strong>→&lt;/strong>
&lt;a href="https://pypi.org/project/aiodns/" target="_blank" rel="noopener noreferrer">aiodns&lt;/a>&lt;/li>
&lt;li>Docker Client:
&lt;a href="https://pypi.org/project/docker/" target="_blank" rel="noopener noreferrer">docker&lt;/a> &lt;strong>→&lt;/strong>
&lt;a href="https://pypi.org/project/aiodocker/" target="_blank" rel="noopener noreferrer">aiodocker&lt;/a>&lt;/li>
&lt;li>File IO:
&lt;a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener noreferrer">std open&lt;/a> &lt;strong>→&lt;/strong>
&lt;a href="https://pypi.org/project/aiofiles/" target="_blank" rel="noopener noreferrer">aiofiles&lt;/a>&lt;/li>
&lt;li>HTTP Client:
&lt;a href="https://pypi.org/project/requests/" target="_blank" rel="noopener noreferrer">requests&lt;/a> &lt;strong>→&lt;/strong>
&lt;a href="https://pypi.org/project/aiohttp/" target="_blank" rel="noopener noreferrer">aiohttp&lt;/a>,
&lt;a href="https://pypi.org/project/httpx/" target="_blank" rel="noopener noreferrer">httpx&lt;/a>&lt;/li>
&lt;li>Postgres:
&lt;a href="https://pypi.org/project/psycopg2/" target="_blank" rel="noopener noreferrer">psycopg2&lt;/a> &lt;strong>→&lt;/strong>
&lt;a href="https://pypi.org/project/psycopg/" target="_blank" rel="noopener noreferrer">psycopg3&lt;/a>,
&lt;a href="https://pypi.org/project/asyncpg/" target="_blank" rel="noopener noreferrer">asyncpg&lt;/a>&lt;/li>
&lt;li>SMTP Client:
&lt;a href="https://docs.python.org/3/library/smtplib.html" target="_blank" rel="noopener noreferrer">std smtplib&lt;/a> &lt;strong>→&lt;/strong>
&lt;a href="https://pypi.org/project/aiosmtplib/" target="_blank" rel="noopener noreferrer">aiosmtplib&lt;/a>&lt;/li>
&lt;li>Webserver:
&lt;a href="https://pypi.org/project/Flask/" target="_blank" rel="noopener noreferrer">flask 1&lt;/a> &lt;strong>→&lt;/strong>
&lt;a href="https://pypi.org/project/Flask/" target="_blank" rel="noopener noreferrer">flask 2&lt;/a>,
&lt;a href="https://pypi.org/project/fastapi/" target="_blank" rel="noopener noreferrer">fastapi&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ibm-db2" class="paragraph-header">IBM DB2 &lt;a
href="#ibm-db2">&lt;/a>&lt;/h2>
&lt;p>However, some old-fashioned libraries haven&amp;rsquo;t adapted yet and maybe never will, like the clunky
&lt;a href="https://pypi.org/project/ibm-db/" target="_blank" rel="noopener noreferrer">ibm-db&lt;/a> package to connect to an IBM DB2 database. The package consists of a
&lt;a href="https://github.com/ibmdb/python-ibmdb/blob/master/ibm_db.c" target="_blank" rel="noopener noreferrer">C driver&lt;/a> and
&lt;a href="https://github.com/ibmdb/python-ibmdb/blob/master/ibm_db_dbi.py" target="_blank" rel="noopener noreferrer">python interface&lt;/a> (IMHO, the latter looks like it was poorly written by absolute python beginners together with naysayers to the idea that python code could be pythonic at all).&lt;/p>
&lt;p>So the problem is to run the sync lib
&lt;a href="https://pypi.org/project/ibm-db/" target="_blank" rel="noopener noreferrer">&lt;em>ibm-db&lt;/em>&lt;/a> in an async context, like a FastAPI webserver. The standard approach is to use &lt;code>asyncio.to_thread()&lt;/code> to delegate the sync tasks (db access operations) into additional threads to free the event loop on the main thread. As &lt;em>ibm-db&lt;/em> is not subject to the
&lt;a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank" rel="noopener noreferrer">GIL&lt;/a> there should be no disadvantage except the overhead of spawning threads. But &lt;em>ibm-db&lt;/em> is also not thread-safe. Multiple threads interact with a DB2 instance result in race conditions, connection abortions and incomplete result set responses. So &lt;em>ibm-db&lt;/em> cannot be used in async nor multithreaded environments. So the workaround is to run &lt;em>ibm-db&lt;/em> in (at most) one dedicated thread, but never in the main thread to keep the event loop free. This can be achieved with Python&amp;rsquo;s
&lt;a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" target="_blank" rel="noopener noreferrer">&lt;code>ThreadPoolExecutor&lt;/code>&lt;/a> and the constraint &lt;code>max_workers=1&lt;/code>. See code below.&lt;/p>
&lt;h3 id="old-code-blocks-the-async-loop" class="paragraph-header">Old code (blocks the async loop) &lt;a
href="#old-code-blocks-the-async-loop">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> ibm_db_dbi &lt;span style="color:#ff79c6">as&lt;/span> db2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">run_query&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn: db2&lt;span style="color:#ff79c6">.&lt;/span>Connection &lt;span style="color:#ff79c6">=&lt;/span> db2&lt;span style="color:#ff79c6">.&lt;/span>pconnect(dsn&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;...&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">with&lt;/span> conn&lt;span style="color:#ff79c6">.&lt;/span>cursor() &lt;span style="color:#ff79c6">as&lt;/span> cursor:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cursor&lt;span style="color:#ff79c6">.&lt;/span>execute(&lt;span style="color:#f1fa8c">&amp;#39;select 1+1 from SYSIBM.SYSDUMMY1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#ff79c6">=&lt;/span> cursor&lt;span style="color:#ff79c6">.&lt;/span>fetchone()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#ff79c6">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(run_query()) &lt;span style="color:#6272a4"># blocks event loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(run_query()) &lt;span style="color:#6272a4"># blocks event loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(run_query()) &lt;span style="color:#6272a4"># blocks event loop&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="new-code-frees-the-async-loop" class="paragraph-header">New code (frees the async loop) &lt;a
href="#new-code-frees-the-async-loop">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> asyncio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">from&lt;/span> concurrent.futures &lt;span style="color:#ff79c6">import&lt;/span> ThreadPoolExecutor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> ibm_db_dbi &lt;span style="color:#ff79c6">as&lt;/span> db2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_executor &lt;span style="color:#ff79c6">=&lt;/span> ThreadPoolExecutor(max_workers&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>, thread_name_prefix&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;db2&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">run_query&lt;/span>(): &lt;span style="color:#6272a4"># can be invoked concurrently&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">do&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn: db2&lt;span style="color:#ff79c6">.&lt;/span>Connection &lt;span style="color:#ff79c6">=&lt;/span> db2&lt;span style="color:#ff79c6">.&lt;/span>pconnect(dsn&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;...&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">with&lt;/span> conn&lt;span style="color:#ff79c6">.&lt;/span>cursor() &lt;span style="color:#ff79c6">as&lt;/span> cursor:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cursor&lt;span style="color:#ff79c6">.&lt;/span>execute(&lt;span style="color:#f1fa8c">&amp;#39;select 1+1 from SYSIBM.SYSDUMMY1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#ff79c6">=&lt;/span> cursor&lt;span style="color:#ff79c6">.&lt;/span>fetchone()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#ff79c6">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> asyncio&lt;span style="color:#ff79c6">.&lt;/span>get_event_loop()&lt;span style="color:#ff79c6">.&lt;/span>run_in_executor(_executor, do)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(&lt;span style="color:#ff79c6">await&lt;/span> run_query()) &lt;span style="color:#6272a4"># does not block the event loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(&lt;span style="color:#ff79c6">await&lt;/span> run_query()) &lt;span style="color:#6272a4"># does not block the event loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(&lt;span style="color:#ff79c6">await&lt;/span> run_query()) &lt;span style="color:#6272a4"># does not block the event loop&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LocalForage: Performant batch operations</title><link>https://knrdl.github.io/posts/indexeddb-localforage/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/indexeddb-localforage/</guid><description>&lt;h2 id="problem" class="paragraph-header">Problem &lt;a
href="#problem">&lt;/a>&lt;/h2>
&lt;p>
&lt;a href="https://github.com/localForage/localForage" target="_blank" rel="noopener noreferrer">LocalForage&lt;/a> is a thin wrapper around
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener noreferrer">IndexedDB&lt;/a> (and some fallbacks). IndexedDB is a NoSQL database API exposed by modern browsers. It allows storing JSON and blobs client-side. LocalForage simplifies interacting with IndexedDB by providing a simple key-value store as API instead. The method names are
&lt;a href="https://developer.mozilla.org/de/docs/Web/API/Window/localStorage" target="_blank" rel="noopener noreferrer">localStorage&lt;/a>-like: &lt;code>getItem()&lt;/code>, &lt;code>setItem()&lt;/code>, &lt;code>removeItem()&lt;/code> etc.&lt;/p>
&lt;p>However, batch operations (like a mass insert) are horribly slow when performed via LocalForage. That&amp;rsquo;s because LocalForage opens for every operation a new IndexedDB transaction and this action is remarkable time-consuming compared with other DBMS. So 1000 &lt;code>setItems()&lt;/code> open 1000 transactions which can take multiple seconds to proceed. As LocalForage doesn&amp;rsquo;t provide the API to do this in a single transaction, you need to write your own thin wrapper around IndexedDB and expose transactions as entity.&lt;/p>
&lt;h2 id="solution" class="paragraph-header">Solution &lt;a
href="#solution">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">export&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> kvDb(name: &lt;span style="color:#8be9fd">string&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;kvdb&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> openedDb: &lt;span style="color:#8be9fd">IDBDatabase&lt;/span> &lt;span style="color:#ff79c6">|&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> idbRequestToPromise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(request: &lt;span style="color:#8be9fd">IDBRequest&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Promise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;((resolve, reject) &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.onsuccess &lt;span style="color:#ff79c6">=&lt;/span> () &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> resolve(request.result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.onerror &lt;span style="color:#ff79c6">=&lt;/span> () &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> reject(request.error)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> openDb() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> dbRequest &lt;span style="color:#ff79c6">=&lt;/span> indexedDB.open(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbRequest.onupgradeneeded &lt;span style="color:#ff79c6">=&lt;/span> () &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbRequest.result.createObjectStore(&lt;span style="color:#f1fa8c">&amp;#39;kv-pairs&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(dbRequest)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * A transaction is autocommitted as soon as no new requests are made (!)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * All requests must be added in the same cycle of the event loop.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * The transaction cannot be used afterwards.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> transaction() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>openedDb) openedDb &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> openDb()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> openedDb.transaction(&lt;span style="color:#f1fa8c">&amp;#39;kv-pairs&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;readwrite&amp;#39;&lt;/span>).objectStore(&lt;span style="color:#f1fa8c">&amp;#39;kv-pairs&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">get&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(key: &lt;span style="color:#8be9fd">string&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>)&lt;span style="color:#ff79c6">:&lt;/span> Promise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> value: &lt;span style="color:#8be9fd">T&lt;/span> &lt;span style="color:#ff79c6">|&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.&lt;span style="color:#ff79c6">get&lt;/span>(key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (value &lt;span style="color:#ff79c6">===&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span>) &lt;span style="color:#ff79c6">throw&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Error&lt;/span>(&lt;span style="color:#f1fa8c">`db &amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>name&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34; key &amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>key&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34; not found`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> getDefault&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(key: &lt;span style="color:#8be9fd">string&lt;/span>, defaultValue: &lt;span style="color:#8be9fd">T&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>)&lt;span style="color:#ff79c6">:&lt;/span> Promise&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> value: &lt;span style="color:#8be9fd">T&lt;/span> &lt;span style="color:#ff79c6">|&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.&lt;span style="color:#ff79c6">get&lt;/span>(key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (value &lt;span style="color:#ff79c6">===&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span>) &lt;span style="color:#ff79c6">return&lt;/span> defaultValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">set&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">T&lt;/span>&amp;gt;(key: &lt;span style="color:#8be9fd">string&lt;/span>, value: &lt;span style="color:#8be9fd">T&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.put(value, key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>(key: &lt;span style="color:#8be9fd">string&lt;/span>, transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.&lt;span style="color:#ff79c6">delete&lt;/span>(key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> clear(transaction?: &lt;span style="color:#8be9fd">IDBObjectStore&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> store &lt;span style="color:#ff79c6">=&lt;/span> transaction &lt;span style="color:#ff79c6">??&lt;/span> (&lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>.transaction())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> idbRequestToPromise(store.clear())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As additional optimization the browser can be asked to persist the storage as long as possible:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">await&lt;/span> navigator.storage&lt;span style="color:#ff79c6">?&lt;/span>.persist&lt;span style="color:#ff79c6">?&lt;/span>.()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#ff79c6">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#f1fa8c">&amp;#39;navigator.storage.persist() failed:&amp;#39;&lt;/span>, e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="usage-example" class="paragraph-header">Usage example &lt;a
href="#usage-example">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> localCache &lt;span style="color:#ff79c6">=&lt;/span> kvDb(&lt;span style="color:#f1fa8c">&amp;#39;cache&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Without transaction (slow on batch):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.clear() &lt;span style="color:#6272a4">// clear cache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.&lt;span style="color:#ff79c6">set&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;object1&amp;#39;&lt;/span>, {hello&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;world&amp;#39;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.&lt;span style="color:#ff79c6">get&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;object1&amp;#39;&lt;/span>) &lt;span style="color:#6272a4">// = {hello: &amp;#39;world&amp;#39;}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.getDefault(&lt;span style="color:#f1fa8c">&amp;#39;object2&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;fallback&amp;#39;&lt;/span>) &lt;span style="color:#6272a4">// = &amp;#39;fallback&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">await&lt;/span> localCache.&lt;span style="color:#ff79c6">delete&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;object1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// With transaction (fast on batch):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> transaction &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> localCache.transaction()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">await&lt;/span> Promise.allSettled(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">Array&lt;/span>.&lt;span style="color:#ff79c6">from&lt;/span>(&lt;span style="color:#8be9fd;font-style:italic">Array&lt;/span>(&lt;span style="color:#bd93f9">1000&lt;/span>).keys()).map(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">async&lt;/span> i &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> localCache.&lt;span style="color:#ff79c6">set&lt;/span>(&lt;span style="color:#f1fa8c">`file-&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>i&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">`&lt;/span>, &lt;span style="color:#ff79c6">await&lt;/span> loadFile(i), transaction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Gotchas:&lt;/strong> A transaction can only be used once with
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener noreferrer">&lt;code>Promise.all()&lt;/code>&lt;/a> or
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled" target="_blank" rel="noopener noreferrer">&lt;code>Promise.allSettled()&lt;/code>&lt;/a>. Using the same transaction in multiple consecutive statements is not possible (thanks to the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction#:~:text=A%20transaction%20alternates%20between%20active%20and%20inactive%20states%20between%20event%20loop%20tasks." target="_blank" rel="noopener noreferrer">weird IndexedDB design&lt;/a>).&lt;/p></description></item><item><title>Scan all Docker images on a host for vulnerabilities</title><link>https://knrdl.github.io/posts/docker-trivy-scan/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/docker-trivy-scan/</guid><description>&lt;p>Aquasec Trivy is an open-source vulnerability scanner for dependencies. It can be used to get a quick overview of all (tagged) Docker images on a host and their respective vulnerabilities. This can be done with the following Compose setup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">secscan-reports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">image&lt;/span>: caddy:alpine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">command&lt;/span>: caddy file-server --root /reports --browse --listen :8080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ./reports:/reports:ro
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#bd93f9">127.0.0.1&lt;/span>:&lt;span style="color:#bd93f9">8080&lt;/span>:&lt;span style="color:#bd93f9">8080&lt;/span> &lt;span style="color:#6272a4"># exposed at http://localhost:8080/?sort=time&amp;amp;order=desc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">trivy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">image&lt;/span>: aquasec/trivy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">DOCKER_HOST&lt;/span>: tcp://docker-socket-protector:2375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">entrypoint&lt;/span>: [ &lt;span style="color:#f1fa8c">&amp;#34;/bin/sh&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;-c&amp;#34;&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> sleep 10m
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> apk add docker-cli jq
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> while true; do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> for imagename in $(docker ps -a --format=&amp;#34;{{.Image}}&amp;#34; | uniq); do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> echo &amp;#34;Scanning image: $$imagename&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> filename=$(echo -n &amp;#34;$$imagename&amp;#34; | jq -sRr &amp;#39;@uri&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> rm &amp;#34;/reports/$$filename.html&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> nice -n 19 trivy image --no-progress --scanners vuln,secret,misconfig --severity MEDIUM,HIGH,CRITICAL --format template --template &amp;#34;@contrib/html.tpl&amp;#34; -o &amp;#34;/reports/$$filename.html&amp;#34; &amp;#34;$$imagename&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> sleep 24h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ./reports:/reports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">cpus&lt;/span>: &lt;span style="color:#bd93f9">0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - docker-socket-protector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - internet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - docker_socket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">docker-socket-protector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">image&lt;/span>: knrdl/docker-socket-protector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">hostname&lt;/span>: docker-socket-protector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">restart&lt;/span>: always
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">read_only&lt;/span>: &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">cap_drop&lt;/span>: [ all ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">PROFILE&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;trivy&amp;#34;&lt;/span> &lt;span style="color:#6272a4"># read only access to only docker images&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">LOG_REQUESTS&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - /var/run/docker.sock:/var/run/docker.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - docker_socket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">mem_limit&lt;/span>: 100mb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">internet&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">internal&lt;/span>: &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">docker_socket&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">internal&lt;/span>: &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">attachable&lt;/span>: &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A small selection of CSS libraries</title><link>https://knrdl.github.io/posts/css-libs/</link><pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/css-libs/</guid><description>&lt;h2 id="minimalism" class="paragraph-header">Minimalism &lt;a
href="#minimalism">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://milligram.io/" target="_blank" rel="noopener noreferrer">https://milligram.io/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://minicss.us/docs.htm" target="_blank" rel="noopener noreferrer">https://minicss.us/docs.htm&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://picnicss.com/documentation" target="_blank" rel="noopener noreferrer">https://picnicss.com/documentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="retro" class="paragraph-header">Retro &lt;a
href="#retro">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://nostalgic-css.github.io/NES.css/" target="_blank" rel="noopener noreferrer">https://nostalgic-css.github.io/NES.css/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://jdan.github.io/98.css/" target="_blank" rel="noopener noreferrer">https://jdan.github.io/98.css/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://botoxparty.github.io/XP.css/" target="_blank" rel="noopener noreferrer">https://botoxparty.github.io/XP.css/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://khang-nd.github.io/7.css/" target="_blank" rel="noopener noreferrer">https://khang-nd.github.io/7.css/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="components-as-css-classes" class="paragraph-header">Components as CSS classes &lt;a
href="#components-as-css-classes">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://www.getpapercss.com/docs/" target="_blank" rel="noopener noreferrer">https://www.getpapercss.com/docs/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://getbootstrap.com/docs/5.2/getting-started/introduction/" target="_blank" rel="noopener noreferrer">https://getbootstrap.com/docs/5.2/getting-started/introduction/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://bulma.io/documentation/components/" target="_blank" rel="noopener noreferrer">https://bulma.io/documentation/components/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://getuikit.com/docs/introduction" target="_blank" rel="noopener noreferrer">https://getuikit.com/docs/introduction&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://picturepan2.github.io/spectre/getting-started.html" target="_blank" rel="noopener noreferrer">https://picturepan2.github.io/spectre/getting-started.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tailwind" class="paragraph-header">Tailwind &lt;a
href="#tailwind">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">https://tailwindcss.com/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://daisyui.com/components/" target="_blank" rel="noopener noreferrer">https://daisyui.com/components/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://flowbite.com/" target="_blank" rel="noopener noreferrer">https://flowbite.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="smartphone" class="paragraph-header">Smartphone &lt;a
href="#smartphone">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://ionicframework.com/docs/components" target="_blank" rel="noopener noreferrer">https://ionicframework.com/docs/components&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://framework7.io/svelte/introduction" target="_blank" rel="noopener noreferrer">https://framework7.io/svelte/introduction&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="svelte-components" class="paragraph-header">Svelte Components &lt;a
href="#svelte-components">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://illright.github.io/attractions/" target="_blank" rel="noopener noreferrer">https://illright.github.io/attractions/&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://sveltematerialui.com/" target="_blank" rel="noopener noreferrer">https://sveltematerialui.com/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Generate encrypted 7zip files</title><link>https://knrdl.github.io/posts/encrypted-7zip-files/</link><pubDate>Tue, 13 Feb 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/encrypted-7zip-files/</guid><description>&lt;p>Using 7zip files as encrypted backups is a quick and dirty workaround for a proper backup solution.&lt;/p>
&lt;p>First generate a &lt;strong>strong&lt;/strong> password, e.g.: &lt;code>pwgen -1sB 128&lt;/code>&lt;/p>
&lt;h2 id="backup-without-compression" class="paragraph-header">Backup without compression &lt;a
href="#backup-without-compression">&lt;/a>&lt;/h2>
&lt;p>&lt;code>7z a -mx=0 -mhe=on -m0=Copy -p&amp;quot;$PASSWORD&amp;quot; TARGET.7z SOURCE_FOLDERS_*&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mx=0&lt;/code> and &lt;code>m0=Copy&lt;/code> mean: just copy the files, do not compress them&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mhe=on&lt;/code> means: also encrypt the 7z headers, so the password is also required for listing the file tree&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="backup-with-compression" class="paragraph-header">Backup with compression &lt;a
href="#backup-with-compression">&lt;/a>&lt;/h2>
&lt;p>&lt;code>7z a -mx=3 -mhe=on -ms=on -p&amp;quot;$PASSWORD&amp;quot; TARGET.7z SOURCE_FOLDERS_*&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>ms=on&lt;/code> treats everything as a single file (find duplicates)&lt;/li>
&lt;/ul>
&lt;h2 id="check-the-archive-file" class="paragraph-header">Check the archive file &lt;a
href="#check-the-archive-file">&lt;/a>&lt;/h2>
&lt;p>&lt;code>7z l -slt -p&amp;quot;$PASSWORD&amp;quot; TARGET.7z&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>7zAES:19&lt;/code> means secure AES-256 encryption (plus some password hashing, see
&lt;a href="https://sourceforge.net/p/p7zip/patches/25/#3da5" target="_blank" rel="noopener noreferrer">here&lt;/a>).&lt;/li>
&lt;/ul></description></item><item><title>Wayland: Auto-clean clipboard</title><link>https://knrdl.github.io/posts/wayland-clipboard-clean/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/wayland-clipboard-clean/</guid><description>&lt;p>Wayland has the safety feature of clearing the clipboard if you close the source window (where the content was copied from). Password managers (like KeePass) also give you only a few seconds to paste the password somewhere before clearing the clipboard. But in day-to-day life, you might need to copy secrets and tokens outside a password manager. To prevent accidental pastes, these values should not stay in the clipboard forever. A manual attempt is to overwrite the clipboard by copying something harmless afterwards, but that&amp;rsquo;s not very fault-tolerant. The automatic solution is to clear the clipboard if the last copy action is older than a certain delay.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt install wl-clipboard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Executable file &lt;code>/usr/local/bin/clipboard-cleaner-handler&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/bin/dash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># remove previous delay handlers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pgrep -f -x &lt;span style="color:#f1fa8c">&amp;#34;/bin/dash &lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$0&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> | grep -v ^&lt;span style="color:#8be9fd;font-style:italic">$$&lt;/span>&lt;span style="color:#f1fa8c">\$&lt;/span> | &lt;span style="color:#ff79c6">while&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">read&lt;/span> pid ; &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">kill&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep &lt;span style="color:#bd93f9">45&lt;/span> &lt;span style="color:#6272a4"># &amp;lt;- the delay&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wl-copy -c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> cleared clipboard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Executable file &lt;code>/usr/local/bin/clipboard-cleaner&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/bin/dash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>wl-paste -w /bin/dash -c &lt;span style="color:#f1fa8c">&amp;#39;/usr/local/bin/clipboard-cleaner-handler &amp;amp;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally put &lt;code>clipboard-cleaner&lt;/code> into autostart.&lt;/p>
&lt;p>How does it work: &lt;code>wl-paste&lt;/code> watches for clipboard copy events and executes &lt;code>clipboard-cleaner-handler&lt;/code> each time without blocking the listening. &lt;code>clipboard-cleaner-handler&lt;/code> first removes all invocations of itself from previous copy events. Then it waits for the delay before cleaning the clipboard. That way, only the last triggered delay actually counts.&lt;/p></description></item><item><title>InfluxDB v2: Single Sign On</title><link>https://knrdl.github.io/posts/influxdb2-sso/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/influxdb2-sso/</guid><description>&lt;p>The &lt;abbr title="Telegraf, InfluxDB, Chronograf, Kapacitor">TICK&lt;/abbr> stack v1 did not enforce authentication. So SSO for the Chronograf WebUI could be handled easily via the reverse proxy. InfluxDB v2 includes a WebUI on its own and therefore replaces Chronograf. As InfluxDB v2 enforces built-in authentication there must be accounts. But InfluxDB v2 has no &lt;abbr title="Single Sign On">SSO&lt;/abbr> capabilities. The solution is to create an &amp;ldquo;All Access API Token&amp;rdquo; and inject it via the reverse proxy, e.g. Caddy:&lt;/p>
&lt;pre tabindex="0">&lt;code>monitor.example.org {
reverse_proxy influxdb:8086 {
header_up Authorization &amp;#34;Token YOUR_TOKEN&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;p>Now the WebUI does not require built-in authentication anymore and it could be handled by the reverse proxy again.&lt;/p>
&lt;p>The other always working, obvious solution is to just use Grafana instead.&lt;/p></description></item><item><title>Gitlab: RenovateBot Setup</title><link>https://knrdl.github.io/posts/gitlab-renovatebot-setup/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/gitlab-renovatebot-setup/</guid><description>&lt;ol>
&lt;li>
&lt;p>Create a gitlab user &amp;ldquo;renovate.bot&amp;rdquo;:&lt;/p>
&lt;ul>
&lt;li>External User: Yes&lt;/li>
&lt;li>Personal projects limit: 0&lt;/li>
&lt;li>Can create top level groups: No&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Impersonate &amp;ldquo;renovate.bot&amp;rdquo; (or login as this user) and create a &lt;code>Settings&lt;/code> → &lt;code>Access Tokens&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>Expiration: 1 year (place a reminder to renew this!)&lt;/li>
&lt;li>Scopes: api, read_api, read_repository, write_repository, read_registry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Create a repository &amp;ldquo;renovate.bot&amp;rdquo; and add the user &amp;ldquo;renovate.bot&amp;rdquo; as Maintainer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set a pipeline schedule (how often the renovate bot will run), e.g. every day at 5am: &lt;code>0 5 * * *&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Settings&lt;/code> → &lt;code>CI/CD&lt;/code> → &lt;code>Variables&lt;/code>: add a variable to supply the access token:&lt;/p>
&lt;ul>
&lt;li>Key: &lt;code>RENOVATE_TOKEN&lt;/code>&lt;/li>
&lt;li>Value: the access token of the &amp;ldquo;renovate.bot&amp;rdquo; user (step 2)&lt;/li>
&lt;li>Protect and mask the variable&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p class="warning">Keep in mind that every gitlab user with (at least) Maintainer role in the &amp;ldquo;renovate.bot&amp;rdquo; repository can see the &lt;code>RENOVATE_TOKEN&lt;/code>. For this reason every maintainer can see and do everything the &amp;ldquo;renovate.bot&amp;rdquo; user is capable of.&lt;/p>
&lt;/blockquote>
&lt;ol start="6">
&lt;li>Add these two files to the repo:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>.gitlab-ci.yml&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">renovate&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">image&lt;/span>: renovatebot/renovate:37-slim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">variables&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_LOG_FILE&lt;/span>: renovate-log.ndjson
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_LOG_FILE_LEVEL&lt;/span>: debug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">LOG_LEVEL&lt;/span>: info &lt;span style="color:#6272a4"># console logging should be less verbose than the logfile because pipeline output is kept forever, logfiles can expire&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_BASE_DIR&lt;/span>: $CI_PROJECT_DIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_ENDPOINT&lt;/span>: $CI_API_V4_URL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_PLATFORM&lt;/span>: gitlab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_ALLOW_SCRIPTS&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;true&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_AUTODISCOVER&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;true&amp;#39;&lt;/span> &lt;span style="color:#6272a4"># all repos where the &amp;#34;renovate.bot&amp;#34; user is (at least) developer are handled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_ONBOARDING&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;false&amp;#39;&lt;/span> &lt;span style="color:#6272a4"># no initial MR required&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_REPOSITORY_CACHE&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;enabled&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_REQUIRE_CONFIG&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;optional&amp;#39;&lt;/span> &lt;span style="color:#6272a4"># the renovate.json file in each handled repo is not required&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_TOKEN&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;$RENOVATE_TOKEN&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_PR_HOURLY_LIMIT&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;50&amp;#39;&lt;/span> &lt;span style="color:#6272a4"># limit the creation of MRs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">RENOVATE_CONFIG_FILE&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;config.json&amp;#39;&lt;/span> &lt;span style="color:#6272a4"># path to renovate global config in &amp;#34;renovate.bot&amp;#34; repo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">NODE_OPTIONS&lt;/span>: --use-openssl-ca
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">SSL_CERT_DIR&lt;/span>: /etc/ssl/certs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">REQUESTS_CA_BUNDLE&lt;/span>: /etc/ssl/certs/ca-certificates.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">cache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">key&lt;/span>: ${CI_COMMIT_REF_SLUG}-renovate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - renovate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff79c6">if&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;$CI_PIPELINE_SOURCE == &amp;#34;schedule&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">artifacts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">when&lt;/span>: always
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">expire_in&lt;/span>: 1d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f1fa8c">&amp;#39;$RENOVATE_LOG_FILE&amp;#39;&lt;/span> &lt;span style="color:#6272a4"># remove the renovate logfile from each run after one day to reduce disk usage&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>config.json&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;$schema&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;https://docs.renovatebot.com/renovate-schema.json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;packageRules&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;matchDatasources&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;registryUrls&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;https://docker-registry-mirror.example.org&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;matchUpdateTypes&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;minor&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;patch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;enabled&amp;#34;&lt;/span>: &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;matchUpdateTypes&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;major&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;enabled&amp;#34;&lt;/span>: &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will use a docker registry mirror and open MRs for minor and patch updates (no breaking changes). Unless &lt;code>&amp;quot;automerge&amp;quot;: true&lt;/code> is specified, these MRs will stay open for manual intervention.&lt;/p>
&lt;ol start="7">
&lt;li>
&lt;p>Add the &amp;ldquo;renovate.bot&amp;rdquo; user to your repositories:&lt;/p>
&lt;ul>
&lt;li>As &lt;strong>Developer&lt;/strong> if the renovate bot should open MRs &lt;em>but not&lt;/em> automerge them&lt;/li>
&lt;li>As &lt;strong>Maintainer&lt;/strong> if the renovate bot should open MRs &lt;em>and&lt;/em> automerge them (on protected branches)&lt;/li>
&lt;li>As &lt;strong>Reporter&lt;/strong> if the renovate bot depends on this repo to do the version checks for another repo (e.g. another repo is based on the docker image in the gitlab docker registry of this repo)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Trigger a run of the scheduled pipeline to test the setup.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>View all MRs (for your repositories) opened by the renovate bot:
&lt;a href="https://git.example.org/dashboard/merge_requests?scope=all&amp;amp;state=opened&amp;amp;author_username=renovate.bot" target="_blank" rel="noopener noreferrer">https://git.example.org/dashboard/merge_requests?scope=all&amp;state=opened&amp;author_username=renovate.bot&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Multiprocessing, Multithreading, Asynchronous programming: What's the difference?</title><link>https://knrdl.github.io/posts/multiprocessing-multithreading-async/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/multiprocessing-multithreading-async/</guid><description>&lt;h2 id="the-problem" class="paragraph-header">The problem &lt;a
href="#the-problem">&lt;/a>&lt;/h2>
&lt;p>In programming there is often a need to run things in parallel, for example:&lt;/p>
&lt;ul>
&lt;li>Execution time is optimized if tasks run in parallel&lt;/li>
&lt;li>A webserver needs to handle multiple requests simultaneously&lt;/li>
&lt;li>Sending an email in the background should not block the UI&lt;/li>
&lt;/ul>
&lt;p>There are three different approaches for these requirements with structural differences.&lt;/p>
&lt;h2 id="multiprocessing--multiprogramming" class="paragraph-header">Multiprocessing / Multiprogramming &lt;a
href="#multiprocessing--multiprogramming">&lt;/a>&lt;/h2>
&lt;p>Multiprocessing is the oldest attempt of parallelization. It is useful for batch processing with no dependencies between the jobs. Typical use cases are:&lt;/p>
&lt;ul>
&lt;li>converting a lot of images between formats (converting image #1 has no impact on the conversion of image #2)&lt;/li>
&lt;li>compressing files individually&lt;/li>
&lt;li>converting each slide of a presentation into the PDF format and concat them afterward into a single PDF file&lt;/li>
&lt;/ul>
&lt;p>A typical setup looks like this:&lt;/p>
&lt;ul>
&lt;li>one &lt;strong>manager&lt;/strong> process: keeps a task queue and coordinates the workers by distributing the tasks among them&lt;/li>
&lt;li>one &lt;strong>worker&lt;/strong> process per logical CPU core: performs the supplied task and gets the next one from the manager when finished&lt;/li>
&lt;/ul>
&lt;p>Using one worker process per processor core is most of the time reasonable. As each job runs on a processor core the full processing capabilities of the machine are utilized. But there is still the coordination overhead of the manager process which requires context switches by the operating system. If the machine for example has 4 CPU cores there will never be a 4x speedup by embracing multiprocessing instead of running the jobs one after another. Instead, maybe a 3.8x speedup is more likely to achieve. This also depends on the specific kind of workload. Practically speaking the operating system also has to handle other processes as well which also consume CPU time.&lt;/p>
&lt;p>But it is still possible to reduce the management overhead of the workers. Instead of supplying single tasks to the workers, they can be fed with small batches of tasks.&lt;/p>
&lt;p>This concept is useful when there is no shared memory between the tasks, e.g. converting image #170 has no influence on the conversion of image #171 or #172. A typical implementation might use the process infrastructure as provided by the operating system. For an application developer this is easy to implement but spawning new processes has an overhead on its own. That&amp;rsquo;s where multithreading comes into play.&lt;/p>
&lt;h2 id="multithreading" class="paragraph-header">Multithreading &lt;a
href="#multithreading">&lt;/a>&lt;/h2>
&lt;p>Multiprocessing works fine as long as there is no shared memory between tasks. But what if two tasks need to communicate with each other to fulfill their goal:&lt;/p>
&lt;ul>
&lt;li>converting a video in the backend might need to report real-time progress to the frontend&lt;/li>
&lt;li>a database connection might be used by multiple requests&lt;/li>
&lt;li>a server handling HTTP requests might keep a global state which affects the processing of following HTTP requests&lt;/li>
&lt;li>automatic sending an email might fail but can be retried. To limit the number of retries a failure counter might be kept in the database and is incremented until the upper bound is reached. Meanwhile, the execution of the main server program should continue flawless.&lt;/li>
&lt;/ul>
&lt;p>So multithreading is always applicable if multiple components of an application should run at the same time and must be able to communicate with each other by sharing in-memory state. Sharing state is what differs multiprocessing from multithreading. In multiprocessing environments grabbing state is normally only wanted after the execution of a job. For example the manager might check the console output of a worker to decide if a failed job should run again or execution is given up and the job is marked as finally failed.&lt;/p>
&lt;p>In contradistinction to multiprocessing multithreading allows real-time information exchange between the threads of an application. Each process can spawn multiple threads and their threads can also spawn new threads on their own. As threads are regularly also handled by the operating system they are sometimes referred to as &amp;ldquo;lightweight processes&amp;rdquo;. But an application can also implement a threading concept on its own besides the threading capabilities provided by the operating system. These application handled threads are often called &amp;ldquo;green threads&amp;rdquo;.&lt;/p>
&lt;p>Multithreading has its benefits: parallelized shared in-memory state, parallel execution inside an application, spawning threads is cheaper than spawning processes. But this architecture brings in a new class of problems: race conditions.
If two threads can access the same memory there will be corruptions sooner or later. These bugs are hard to debug. For example thread #1 might be writing a string variable while thread #2 is reading it out. The result will be that thread #2 is reading a malformed string which contains old and new parts. As this error is not fatal the application will work on with corrupted data. This can evolve to a security problem (e.g. TOCTOU) or corrupt data retention integrity. Therefore, a bulletproof locking mechanism is compulsory when working with multithreading. For example thread #1 sets a mutex flag before writing to the variable. Now thread #2 waits until the mutex is unset by thread #1 before reading out the value. There can still be problems. For example the programmer might forget to unset the mutex so thread #2 waits until infinity before going on. As the rest of the application (the other threads) stay operational this class of bugs is also hard to detect. Therefore, it is a good idea to use atomic data types (as found e.g. in c++, go, rust) which handle locking on their own.&lt;/p>
&lt;p>However, locking as mitigation technique might still produce problems like deadlocks: E.g. mutex #1 is set and waits for mutex #2 to be unset. But if mutex #2 waits for mutex #1 to be unset the situation becomes unsolvable without giving up the locks. To prevent locking from being essential part of the programming experience some high level languages have taken workarounds, for example JavaScript and Python.&lt;/p>
&lt;p>In the past web browsers have used a single thread to render an open tab. That&amp;rsquo;s why JavaScript is designed to be a single-threaded language. There is just no native threading concept in JavaScript. Nowadays extensions to the web standards like the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" target="_blank" rel="noopener noreferrer">Web Workers API&lt;/a> have introduced the possibility to do multithreading with JavaScript. However, JavaScript per default runs single-threaded and strongly utilizes async programming instead, which is explained in the section below.&lt;/p>
&lt;p>In contradistinction to JavaScript Python is designed with multithreading in mind but wants to avoid the pitfalls of application-handled locking. Therefore, the Python interpreter implements a technique called global interpreter lock (GIL). A Python application can spawn multiple threads with no trouble. However, these threads never run at the exact same time even if it looks that way to the application written in Python. Instead, the GIL schedule the execution of only one thread at a time. This pseudo-multithreading discharges the developer from thinking about race conditions. Two threads accessing the same variable will simply never run at the same time in realtime. So all thread crossing operations are atomic by default. But on the other hand, because it is just a pseudo-multithreading there is no performance gain in parallelizing workloads via threads in Python. The GIL might be relieved in future Python versions but for now there are 3 alternatives:&lt;/p>
&lt;ol>
&lt;li>Use multiprocessing instead&lt;/li>
&lt;li>Use async programming instead, see section below&lt;/li>
&lt;li>Write the performance critical path of the application as library in another language and use a Python wrapper to access it from Python code&lt;/li>
&lt;/ol>
&lt;p>Option 3 sounds complicated but is actually straightforward. Python can access libraries written in a variety of languages, e.g. C, C++, Fortran, Rust, Go, Cython. These libraries are not subject to the GIL and must handle locking on their own. For example the
&lt;a href="https://cryptography.io/en/latest/" target="_blank" rel="noopener noreferrer">PyCa&lt;/a> project provides cryptographic functions for Python but is written in Rust. So an encryption job done by PyCa in a separate thread can really run at the same time as the rest of the Python application.&lt;/p>
&lt;h2 id="asynchronous-programming" class="paragraph-header">Asynchronous Programming &lt;a
href="#asynchronous-programming">&lt;/a>&lt;/h2>
&lt;p>Multiprocessing and multithreading are efficient when it comes to parallelizing cpu-bound tasks which require a lot of computation. However, in modern programs there is often also a lot of waiting for external resources included. These tasks can be classified as io-bound. Handling these require an additional (the newest of the 3 concepts) paradigm: async programming. A modern server application has to wait for many things like:&lt;/p>
&lt;ul>
&lt;li>Wait for the user to provide input&lt;/li>
&lt;li>Wait for a file to be loaded (read) from the file system&lt;/li>
&lt;li>Wait for the database to respond to a request&lt;/li>
&lt;li>Wait for the network to download a file&lt;/li>
&lt;li>Wait for an email to be sent&lt;/li>
&lt;li>Wait for another process to finish&lt;/li>
&lt;li>Wait for an operating system syscall, e.g. flush caches&lt;/li>
&lt;li>Wait a specified time, alias sleep&lt;/li>
&lt;/ul>
&lt;p>These operations could be modelled as a thread for each operation. But this would be a highly inefficient use of resources: For example a thread would send out an HTTP request and be blocked until the response arrives. In the meantime the thread could not do anything useful (just waiting). But the operating system still has to run the thread. It does so in the same manner it schedules the execution times for all other threads and processes on the machine. This means the operating system will waste cpu-time by waiting for an io-bound task (the HTTP request). That&amp;rsquo;s why multiprocessing/-threading should not be used for io-bound tasks.&lt;/p>
&lt;p>Instead of threads a new form of execution is required: the event loop. Async jobs are executed inside an event loop as a queue. When async job #1 has to wait for something the event loop runs another async job #2 in the event loop meanwhile. Execution of async job #1 will continue when it is done with waiting. In the meantime it does not waste CPU resources which will be used to run other async jobs instead.&lt;/p>
&lt;p>JavaScript historically uses async programming instead of multithreading because websites often didn&amp;rsquo;t have to compute much but wait a lot (e.g. for AJAX network requests). This has some interesting side effects like the following, strange-looking JavaScript statement:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> myfunc() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setTimeout(myfunc, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#6272a4">// schedule execution for in 0ms
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One might say that it could be written shorter as &lt;code>myfunc()&lt;/code>. But &lt;code>myfunc()&lt;/code> would execute &lt;code>myfunc&lt;/code> immediately as part of the current event loop iteration. Instead, &lt;code>setTimeout(myfunc, 0)&lt;/code> will execute &lt;code>myfunc&lt;/code> in the next event loop iteration. This hack ensures that all pending computations are done when &lt;code>myfunc&lt;/code> gets invoked.&lt;/p>
&lt;p>Async programming is often introduced by the keywords &lt;code>async&lt;/code> and &lt;code>await&lt;/code>. In this example a web server invokes a function &lt;code>get_user_info&lt;/code> to answer an HTTP request:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">load_user_from_db&lt;/span>(userid):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">...&lt;/span> &lt;span style="color:#6272a4"># load user record from database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">load_user_profile_photo&lt;/span>(userid):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">...&lt;/span> &lt;span style="color:#6272a4"># send out http request to query the profile photo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">get_user_info&lt;/span>(userid):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> job1 &lt;span style="color:#ff79c6">=&lt;/span> load_user_from_db(userid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> job2 &lt;span style="color:#ff79c6">=&lt;/span> load_user_profile_photo(userid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db_record &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> job1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile_photo &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> job2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> {&lt;span style="color:#f1fa8c">&amp;#39;info&amp;#39;&lt;/span>: db_record, &lt;span style="color:#f1fa8c">&amp;#39;photo&amp;#39;&lt;/span>: profile_photo}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This little pseudocode will asynchronously load information from two sources at the same time. The total execution time is just the time for the longest running job (either &lt;code>job1&lt;/code> or &lt;code>job2&lt;/code>) plus the overhead of putting the jobs into the event loop. This is an example of io-bound parallelization. Programmers often get this wrong and write not parallelized code instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">get_user_info&lt;/span>(userid): &lt;span style="color:#6272a4"># bad implementation without async benefits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db_record &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> load_user_from_db(userid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile_photo &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> load_user_profile_photo(userid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> {&lt;span style="color:#f1fa8c">&amp;#39;info&amp;#39;&lt;/span>: db_record, &lt;span style="color:#f1fa8c">&amp;#39;photo&amp;#39;&lt;/span>: profile_photo}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In practice tasks are rarely just cpu-bound or io-bound but a mix of both. Event loops are good for io-bound tasks but bad for cpu-bound: A cpu-bound task would keep an event loop busy, so it cannot handle other async jobs. The event loop gets blocked and execution might hang. That&amp;rsquo;s why an async task should free up the event loop as fast as it can. Ideally the async task would only do the waiting part inside the event loop. A heavy computation could be outsourced into a separate thread to relief the event loop. To realize this there would be two threads: #1 is executing the event loop and #2 is executing the heavy computation. Thereby the async job becomes all about awaiting the finishing of thread #2. That&amp;rsquo;s exactly what
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" target="_blank" rel="noopener noreferrer">Web Workers&lt;/a> are made for in client-side JavaScript (websites) or
&lt;a href="https://nodejs.org/api/worker_threads.html" target="_blank" rel="noopener noreferrer">Worker Threads&lt;/a> in server-side JavaScript (node.js).&lt;/p>
&lt;p>However, as stated above Python only has pseudo-multithreading and node.js did not have Worker Threads in the past. Therefore, thread-based outsourcing could not help. When the event loop cannot be freed the other attempt is to run multiple event loops. This is achieved by combining multiprocessing with async programming: The manager process spawns multiple worker processes and each worker process runs an independent event loop. The manager will then distribute the tasks among the workers, so no event loop gets fed up. For web servers this is often done with
&lt;a href="https://rubygems.org/gems/unicorn/" target="_blank" rel="noopener noreferrer">unicorn&lt;/a> (Ruby),
&lt;a href="https://gunicorn.org/" target="_blank" rel="noopener noreferrer">gunicorn&lt;/a> (Python) or
&lt;a href="https://www.npmjs.com/package/pm2" target="_blank" rel="noopener noreferrer">pm2&lt;/a> (node.js). However, as multiprocessing is involved there is no shared state between the event loops. This might produce unexpected problems when an application is developed in single worker mode and later operated with multiple workers in production as each worker has its separate state. The solution is to introduce a shared state in form of an in-memory database, e.g. a key-value store like Redis, dragonfly or keydb. This extra growth in architectural complexity can be significant.&lt;/p>
&lt;p>A better approach to sharing state would be to leave out multiprocessing at all and combine multithreading with async programming instead. That&amp;rsquo;s exactly what the Go language did with their go-routines. On startup a Go program spawns a thread for each CPU core of the machine. Each thread then starts an event loop inside, called runtime scheduler. The go-routines then use go-channels to safely exchange state between thread borders.&lt;/p>
&lt;p>As go-routines and go-channels are building blocks of the Go language the whole ecosystem of libraries is crafted upon them. That&amp;rsquo;s important because mixing synchronous with asynchronous code is in general problematic. For example, Python started as a synchronous-only language but later added async support. So now there are two ways to do, let&amp;rsquo;s say, a DNS query. Running a sync DNS query in a sync program works fine, same as an async DNS query in an async program. Running an async DNS query in a sync program doesn&amp;rsquo;t make sense: an event loop would need to be started first, execute the DNS query and then be destroyed. Just running a sync DNS query would be cheaper in this setup. But running a sync DNS query in an async program is really dangerous: it would block the whole event loop just like an expensive computation would do. But instead of really doing something acceptable the sync DNS query would block the event loop just to wait for a response. This aspect makes it even harder to get async programming in Python right because you always must make sure to use async libraries, e.g. install
&lt;a href="https://pypi.org/project/aiosmtplib/" target="_blank" rel="noopener noreferrer">aiosmtp&lt;/a> instead of using
&lt;a href="https://docs.python.org/3/library/smtplib.html" target="_blank" rel="noopener noreferrer">smtplib&lt;/a> from the standard library. Alternatively you can wrap the sync code in a thread or process which brings in the problems explained above.&lt;/p>
&lt;p>Unlike Go, the Rust programming language has nothing like go-routines built-in. Instead, there are separate runtime implementations as libraries, with
&lt;a href="https://tokio.rs/" target="_blank" rel="noopener noreferrer">Tokio&lt;/a> being the most popular one. Tokio features a multithread-capable, async executor which is a building block for many frameworks, e.g. web servers. But as Rust also started as sync language, Tokio is also capable to bridge with sync code.&lt;/p>
&lt;h2 id="conclusion" class="paragraph-header">Conclusion &lt;a
href="#conclusion">&lt;/a>&lt;/h2>
&lt;p>Async by design is the future of application level programming. But the sync into async code conversion on the way takes its time.&lt;/p></description></item><item><title>Gitlab: Generate repository list report</title><link>https://knrdl.github.io/posts/gitlab-repo-list/</link><pubDate>Fri, 12 May 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/gitlab-repo-list/</guid><description>&lt;ol>
&lt;li>You must be admin to get a list of all repositories&lt;/li>
&lt;li>You need a personal access token: Gitlab WebUI → Preferences → Access Tokens → Select scopes: &lt;code>api&lt;/code> or &lt;code>read_api&lt;/code> → Create personal access token&lt;/li>
&lt;li>Run the script:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> csv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>token &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;YOUR_PERSONAL_ACCESS_TOKEN&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>page &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repos &lt;span style="color:#ff79c6">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">while&lt;/span> &lt;span style="color:#ff79c6">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;Page:&amp;#39;&lt;/span>, page)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#ff79c6">=&lt;/span> requests&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">f&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;https://gitlab.example.org/api/v4/projects?page=&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>page&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;amp;per_page=100&amp;amp;private_token=&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>token&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">assert&lt;/span> res&lt;span style="color:#ff79c6">.&lt;/span>status_code &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> records &lt;span style="color:#ff79c6">=&lt;/span> res&lt;span style="color:#ff79c6">.&lt;/span>json()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> records:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> record &lt;span style="color:#ff79c6">in&lt;/span> records:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> creator_id &lt;span style="color:#ff79c6">=&lt;/span> record[&lt;span style="color:#f1fa8c">&amp;#39;creator_id&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> creator_id: &lt;span style="color:#6272a4"># attach creator user record to the repo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> creator_id &lt;span style="color:#ff79c6">not&lt;/span> &lt;span style="color:#ff79c6">in&lt;/span> users:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_res &lt;span style="color:#ff79c6">=&lt;/span> requests&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">f&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;https://gitlab.example.org/api/v4/users/&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>creator_id&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">?private_token=&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>token&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">assert&lt;/span> user_res&lt;span style="color:#ff79c6">.&lt;/span>status_code &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> users[creator_id] &lt;span style="color:#ff79c6">=&lt;/span> user_res&lt;span style="color:#ff79c6">.&lt;/span>json()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">=&lt;/span> users[creator_id]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repos&lt;span style="color:#ff79c6">.&lt;/span>append(record)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> page&lt;span style="color:#ff79c6">+=&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">with&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">open&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;repos.json&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#ff79c6">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json&lt;span style="color:#ff79c6">.&lt;/span>dump(repos, f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">with&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">open&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;repos.csv&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#ff79c6">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> csvw &lt;span style="color:#ff79c6">=&lt;/span> csv&lt;span style="color:#ff79c6">.&lt;/span>writer(f, delimiter&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;,&amp;#39;&lt;/span>, quotechar&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;&amp;#34;&amp;#39;&lt;/span>, quoting&lt;span style="color:#ff79c6">=&lt;/span>csv&lt;span style="color:#ff79c6">.&lt;/span>QUOTE_MINIMAL)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> csvw&lt;span style="color:#ff79c6">.&lt;/span>writerow([&lt;span style="color:#f1fa8c">&amp;#39;Title&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Url&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Creator&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Created&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Last Activity&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;Private&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> repo &lt;span style="color:#ff79c6">in&lt;/span> repos:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;archived&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">and&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;empty_repo&amp;#39;&lt;/span>]: &lt;span style="color:#6272a4"># filter out archived repos and repos without files (e.g. issue only repos)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> csvw&lt;span style="color:#ff79c6">.&lt;/span>writerow([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;name_with_namespace&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;web_url&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">f&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>repo[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;name&amp;#39;&lt;/span>]&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c"> (&lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>repo[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;username&amp;#39;&lt;/span>]&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">)&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;creator&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;created_at&amp;#39;&lt;/span>]&lt;span style="color:#ff79c6">.&lt;/span>split(&lt;span style="color:#f1fa8c">&amp;#39;T&amp;#39;&lt;/span>)[&lt;span style="color:#bd93f9">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;last_activity_at&amp;#39;&lt;/span>]&lt;span style="color:#ff79c6">.&lt;/span>split(&lt;span style="color:#f1fa8c">&amp;#39;T&amp;#39;&lt;/span>)[&lt;span style="color:#bd93f9">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repo[&lt;span style="color:#f1fa8c">&amp;#39;visibility&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;private&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">and&lt;/span> repo[&lt;span style="color:#f1fa8c">&amp;#39;namespace&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;path&amp;#39;&lt;/span>] &lt;span style="color:#ff79c6">==&lt;/span> repo&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">&amp;#39;owner&amp;#39;&lt;/span>, {})&lt;span style="color:#ff79c6">.&lt;/span>get(&lt;span style="color:#f1fa8c">&amp;#39;username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Postgres: Fast row count estimates</title><link>https://knrdl.github.io/posts/postgres-fast-row-count/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/postgres-fast-row-count/</guid><description>&lt;p>Counting rows in postgresql is as easy as &lt;code>select count(1) from mytable&lt;/code>. This is a precise count. But it becomes slow on an increasing number of records, especially when a sequential scan of all table records is required, see &lt;code>explain select count(1) from mytable&lt;/code>. But in the end the user often doesn&amp;rsquo;t care if there are about 125_000_000 or exactly 124_756_849 results. Therefore, a fast row count estimate might be more desirable than a slow precise count.&lt;/p>
&lt;p>Postgres runs internal statistics for the query planner to produce performant decisions. These statistics also include estimates of row counts. They are updated regularly by autovacuum or manually by &lt;code>analyze mytable&lt;/code>. The later one is only necessary to get better results on very recent insert/delete batches.&lt;/p>
&lt;p>This snippet uses the postgres statistics to estimate the row count:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> psycopg2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conn &lt;span style="color:#ff79c6">=&lt;/span> psycopg2&lt;span style="color:#ff79c6">.&lt;/span>connect(os&lt;span style="color:#ff79c6">.&lt;/span>getenv(&lt;span style="color:#f1fa8c">&amp;#39;DB_DSN&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cur &lt;span style="color:#ff79c6">=&lt;/span> conn&lt;span style="color:#ff79c6">.&lt;/span>cursor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cur&lt;span style="color:#ff79c6">.&lt;/span>execute(&lt;span style="color:#f1fa8c">&amp;#39;explain (format json) select * from mytable;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &lt;span style="color:#ff79c6">=&lt;/span> cur&lt;span style="color:#ff79c6">.&lt;/span>fetchone()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>row_count &lt;span style="color:#ff79c6">=&lt;/span> res[&lt;span style="color:#bd93f9">0&lt;/span>][&lt;span style="color:#bd93f9">0&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;Plan&amp;#39;&lt;/span>][&lt;span style="color:#f1fa8c">&amp;#39;Plan Rows&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Cheatsheet: GIS Entities</title><link>https://knrdl.github.io/posts/gis-entities/</link><pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/gis-entities/</guid><description>&lt;p>This post will briefly explain the basic components of a geographic information system (GIS) from a technical point of view (for comp sci students).&lt;/p>
&lt;h2 id="part-1" class="paragraph-header">Part 1 &lt;a
href="#part-1">&lt;/a>&lt;/h2>
&lt;figure>
&lt;img src="gis1.svg" alt="GIS Entities 1">
&lt;/figure>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>GIS&lt;/strong>: provides the required tools to perform operations on geospatial data, e.g. QGIS, OpenLayers, Google Maps&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Map&lt;/strong>: representation of geospatial information, shows multiple layers which are stacked over each other in a visual manner&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Projection&lt;/strong>: transformation of the earth shape into a rectangle (2d) or sphere (3d). This process is never lossless, see
&lt;a href="https://www.thetruesize.com/" target="_blank" rel="noopener noreferrer">https://www.thetruesize.com/&lt;/a>. Projections can cover only parts of the earth or the whole globe (world projections). World projections are EPSG:3857 and EPSG:4236 (longitude+latitude)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Layer&lt;/strong>: contains geographical information for a specific topic, e.g. buildings, roads or rails.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Raster Layer&lt;/strong>: Shows georeferenced pixel-based photos, e.g. satellite photo, air photo or street map (like
&lt;a href="https://www.openstreetmap.org/about" target="_blank" rel="noopener noreferrer">OpenStreetMap&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Vector Layer&lt;/strong>: Shows georeferenced, scalable and interactive geometric shapes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Feature&lt;/strong>: a technical unit represented on a map, e.g. a tree, a rail track, a building, a sea.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Tabular feature data&lt;/strong>: key value information about the feature, e.g. address of a building&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Geometry attribute of a feature&lt;/strong>: where and in which shape the feature is located on the map&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Geometry&lt;/strong>: a georeferenced shape&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Point&lt;/strong>: single pair of coordinates: &lt;code>(x,y)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>LineString&lt;/strong>: list of coordinates: &lt;code>[(x1,y1), (x2,y2), (x3,y3)]&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Polygon&lt;/strong>: list of coordinates with first and last point connected: &lt;code>[(x1,y1), (x2,y2), (x3,y3), (x1,y1)]&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Circle&lt;/strong>: can either be constructed from a list of coordinates (as polygon, imprecise) or based on a centre and radius&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Multi Point, LineString, Polygon&lt;/strong>: a feature consisting of multiple non-connected geometries might have a composed type.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Style&lt;/strong>: how to present a feature on the map. Different styles allow a graphical analysis of the features. Therefore, varying styling rules can be built out of the &lt;em>Tabular feature data&lt;/em>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="part-2" class="paragraph-header">Part 2 &lt;a
href="#part-2">&lt;/a>&lt;/h2>
&lt;figure>
&lt;img src="gis2.svg" alt="GIS Entities 2">
&lt;/figure>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Service&lt;/strong>: Processes the geodata into a consumable format, e.g. render a raster image. Operates as web server.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GeoJSON&lt;/strong>: JSON based exchange format for &lt;em>Geometries&lt;/em> and &lt;em>Tabular feature data&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>PostGIS&lt;/strong>: A postgres server instance with the &amp;ldquo;PostGIS&amp;rdquo; extension installed&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GeoPackage&lt;/strong>: SQLite based geodata store&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>WMS&lt;/strong>: open standard protocol to render raster images out of geospatial data and styling rules&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>WMTS&lt;/strong>: same as &lt;em>WMS&lt;/em> but pre-rendered into Tiles of a fixed size&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>WFS&lt;/strong>: open standard protocol to query &lt;em>Features&lt;/em> with &lt;em>Geometries&lt;/em>, not &lt;em>Styles&lt;/em>!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>WFS-T&lt;/strong>: same as &lt;em>WFS&lt;/em> but transactional (allow editing of &lt;em>Features&lt;/em>)&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Microsoft Office won't open links with SSO</title><link>https://knrdl.github.io/posts/msoffice-wont-open-links-with-sso/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/msoffice-wont-open-links-with-sso/</guid><description>&lt;p>M$ Office is tightly bundled with Internet Explorer. So it used to open links in office documents in a separate IE8 instance. That was already problematic as cookies were not preserved. So the user has to login every time he clicks on a link in a excel sheet if the website has authentication in place.&lt;/p>
&lt;p>Nowadays the Internet Explorer is finally dead (at least I hope so). When you click on a link in an excel sheet the default browser will pop up. But M$ office still preprocesses links. After you click the link in the excel sheet M$ office will trigger a HTTP request to the link target. If the request is successful the browser will open the link. If it fails with a 4xx or 5xx status code M$ office will just show a error message. The built in user agent will also follow http 3xx redirects. If these end up on a SSO portal with status code 4xx the problem is the same.&lt;/p>
&lt;p>Micro$oft offers a * fantastic * solution: Just change a registry key on every machine which might open that excel file. What we can do instead is presenting to M$ office always a 200 response:&lt;/p>
&lt;ul>
&lt;li>When doing the request the M$ office user agent uses a dedicated User Agent String which contains the M$ product name. So a filter can be applied.&lt;/li>
&lt;li>Provide a dedicated domain for links in M$ office files. E.g.
&lt;a href="https://appname-msoffice.example.org" target="_blank" rel="noopener noreferrer">https://appname-msoffice.example.org&lt;/a> instead of
&lt;a href="https://appname.example.org" target="_blank" rel="noopener noreferrer">https://appname.example.org&lt;/a>. A request to this dedicated domain can return a 200 and trigger a Javascript redirect. Nginx code snippet:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>server {
server_name appname-msoffice.example.org;
location / {
add_header Content-Type text/html;
return 200 &amp;#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Please wait ...&amp;lt;/body&amp;gt;&amp;lt;script&amp;gt;window.location=window.location.href.replace(&amp;#34;-msoffice&amp;#34;, &amp;#34;&amp;#34;)&amp;lt;/script&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;;
}
}
&lt;/code>&lt;/pre></description></item><item><title>Miniflux Housekeeping</title><link>https://knrdl.github.io/posts/miniflux-housekeeping/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/miniflux-housekeeping/</guid><description>&lt;p>
&lt;a href="https://miniflux.app/" target="_blank" rel="noopener noreferrer">Miniflux&lt;/a> is a feed reader. As adding feeds is easy, some bloat will appear.&lt;/p>
&lt;h3 id="article-age" class="paragraph-header">Article Age &lt;a
href="#article-age">&lt;/a>&lt;/h3>
&lt;p>List the top 10 feeds with the oldest articles. No updates, no need to keep a subscription.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">select&lt;/span> f.feed_url, f.title,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff79c6">select&lt;/span> &lt;span style="color:#ff79c6">max&lt;/span>(published_at) &lt;span style="color:#ff79c6">from&lt;/span> &lt;span style="color:#ff79c6">public&lt;/span>.entries &lt;span style="color:#ff79c6">where&lt;/span> feed_id &lt;span style="color:#ff79c6">=&lt;/span> f.id) last_published_at
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">from&lt;/span> feeds f &lt;span style="color:#ff79c6">where&lt;/span> f.user_id &lt;span style="color:#ff79c6">=&lt;/span> (&lt;span style="color:#ff79c6">select&lt;/span> id &lt;span style="color:#ff79c6">from&lt;/span> users &lt;span style="color:#ff79c6">where&lt;/span> username &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;knrdl&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">order&lt;/span> &lt;span style="color:#ff79c6">by&lt;/span> last_published_at &lt;span style="color:#ff79c6">limit&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="article-count" class="paragraph-header">Article Count &lt;a
href="#article-count">&lt;/a>&lt;/h3>
&lt;p>List the top 10 feeds with the fewest articles. An article count of 0 either means that the feed never produced articles since you subscribed to it. But it can also mean that the articles have been removed from the source after you read them (Miniflux marks old read articles as removed in the DB and deletes them if they disappear from the source).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">select&lt;/span> f.feed_url, f.title,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff79c6">select&lt;/span> &lt;span style="color:#ff79c6">count&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">from&lt;/span> &lt;span style="color:#ff79c6">public&lt;/span>.entries &lt;span style="color:#ff79c6">where&lt;/span> feed_id &lt;span style="color:#ff79c6">=&lt;/span> f.id) article_count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">from&lt;/span> feeds f &lt;span style="color:#ff79c6">where&lt;/span> f.user_id &lt;span style="color:#ff79c6">=&lt;/span> (&lt;span style="color:#ff79c6">select&lt;/span> id &lt;span style="color:#ff79c6">from&lt;/span> users &lt;span style="color:#ff79c6">where&lt;/span> username &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;knrdl&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">order&lt;/span> &lt;span style="color:#ff79c6">by&lt;/span> article_count &lt;span style="color:#ff79c6">limit&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Ubuntu: configure custom dns resolver</title><link>https://knrdl.github.io/posts/ubuntu-custom-dns-resolver/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/ubuntu-custom-dns-resolver/</guid><description>&lt;p>DNS provisioning mostly works out of the box. But once for a cloud instance the DNS resolver had terrible response times. So I added another resolver.&lt;/p>
&lt;p>Ubuntu uses &lt;code>netplan&lt;/code> as abstraction layer for network config.&lt;/p>
&lt;p>&lt;code>sudo nano /etc/netplan/01-netcfg.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">nameservers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">search&lt;/span>: [ invalid ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">addresses&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#bd93f9">127.0.0.1&lt;/span> &lt;span style="color:#6272a4"># the new resolver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#bd93f9">123.123.123.1&lt;/span> &lt;span style="color:#6272a4"># provided dns resolver &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#bd93f9">223.123.123.2&lt;/span> &lt;span style="color:#6272a4"># provided dns resolver&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a containerized DNS resolver see
&lt;a href="https://github.com/knrdl/unbound-dns-server" target="_blank" rel="noopener noreferrer">here&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p class="warning">DNS resolvers should NOT be exposed to public networks (dns amplification attacks etc.)! So make sure to bind the dns server socket to localhost or the local network.&lt;/p>
&lt;/blockquote>
&lt;p>Finally, run: &lt;code>sudo netplan apply&lt;/code>&lt;/p>
&lt;p>Check which DNS resolver is currently in use: &lt;code>sudo resolvectl status eth0&lt;/code> (filter for network interface &lt;code>eth0&lt;/code> is optional)&lt;/p></description></item><item><title>Minimal setup for a docker host</title><link>https://knrdl.github.io/posts/minimal-docker-host-setup/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/minimal-docker-host-setup/</guid><description>&lt;h2 id="install-docker" class="paragraph-header">Install docker &lt;a
href="#install-docker">&lt;/a>&lt;/h2>
&lt;p>Comes with Docker Compose as &lt;code>$ docker compose&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install ca-certificates curl gnupg lsb-release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;deb [arch=&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>dpkg --print-architecture&lt;span style="color:#ff79c6">)&lt;/span>&lt;span style="color:#f1fa8c"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> &lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>lsb_release -cs&lt;span style="color:#ff79c6">)&lt;/span>&lt;span style="color:#f1fa8c"> stable&amp;#34;&lt;/span> | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check docker is running: &lt;code>$ docker version&lt;/code>&lt;/p>
&lt;h2 id="enable-swap" class="paragraph-header">Enable swap &lt;a
href="#enable-swap">&lt;/a>&lt;/h2>
&lt;p>If not enabled yet&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>fallocate -l 8G /swapfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chmod &lt;span style="color:#bd93f9">600&lt;/span> /swapfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkswap /swapfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo swapon /swapfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo swapon --show
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add to &lt;code>/etc/fstab&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>/swapfile swap swap defaults &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Optional reboot to check if it worked&lt;/p>
&lt;h2 id="enable-fail2ban" class="paragraph-header">Enable fail2ban &lt;a
href="#enable-fail2ban">&lt;/a>&lt;/h2>
&lt;p>Necessary if ssh is accessible over the internet&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt install fail2ban
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl &lt;span style="color:#8be9fd;font-style:italic">enable&lt;/span> --now fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Statistics of failed attempts:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#f1fa8c">&amp;#39;($(NF-1) = /Ban/){print $NF}&amp;#39;&lt;/span> /var/log/fail2ban.log | sort | uniq -c | sort -n
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>try to log in with wrong passwords to check banning is working!&lt;/p>
&lt;h2 id="useful-shortcuts" class="paragraph-header">Useful shortcuts &lt;a
href="#useful-shortcuts">&lt;/a>&lt;/h2>
&lt;p>Add to &lt;code>~/.bashrc&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>alias dc=&amp;#39;docker compose&amp;#39;
alias dclf=&amp;#39;docker compose logs --follow&amp;#39;
alias dcup=&amp;#39;docker compose up --detach --remove-orphans --build&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Test in new terminal or run &lt;code>source ~/.bashrc&lt;/code>&lt;/p>
&lt;h2 id="docker-hardening" class="paragraph-header">Docker Hardening &lt;a
href="#docker-hardening">&lt;/a>&lt;/h2>
&lt;p>Disable inter container communication (ICC) via &lt;code>/etc/docker/daemon.json&lt;/code>, add:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;icc&amp;#34;&lt;/span>: &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Might also want to justify address pool, see
&lt;a href="./minimal-docker-networks">other post&lt;/a>.&lt;/p>
&lt;p>Don&amp;rsquo;t forget to apply changes: &lt;code>$ sudo systemctl restart docker.service&lt;/code>&lt;/p>
&lt;h2 id="docker-housekeeping" class="paragraph-header">Docker Housekeeping &lt;a
href="#docker-housekeeping">&lt;/a>&lt;/h2>
&lt;p>/etc/crontab:&lt;/p>
&lt;pre tabindex="0">&lt;code>0 1 * * * root apt-get -y update
0 3 * * * root /apps/update_all.sh
0 5 * * * root docker system prune --force
*/3 * * * * root /apps/restart_unhealthy.sh
&lt;/code>&lt;/pre>&lt;p>Cronjob commands in detail:&lt;/p>
&lt;h4 id="1-apt-get--y-update" class="paragraph-header">1. &lt;code>apt-get -y update&lt;/code> &lt;a
href="#1-apt-get--y-update">&lt;/a>&lt;/h4>
&lt;p>Will install safe package updates.&lt;/p>
&lt;blockquote>
&lt;p class="warning">Be aware that upgrades (&lt;code>apt-get upgrade&lt;/code>) must be still done manually from time to time.&lt;/p>
&lt;/blockquote>
&lt;h4 id="2-appsupdate_allsh" class="paragraph-header">2. &lt;code>/apps/update_all.sh&lt;/code> &lt;a
href="#2-appsupdate_allsh">&lt;/a>&lt;/h4>
&lt;p>Update all container images (might not be desired):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cd&lt;/span> /apps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">for&lt;/span> d in */; &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">cd&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$d&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$d&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker compose pull &lt;span style="color:#6272a4"># pull new images&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker compose build --pull &lt;span style="color:#6272a4"># pull new base images and build new images&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker compose up -d --remove-orphans &lt;span style="color:#6272a4"># start new containers from new images&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">cd&lt;/span> ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-docker-system-prune---force" class="paragraph-header">3. &lt;code>docker system prune --force&lt;/code> &lt;a
href="#3-docker-system-prune---force">&lt;/a>&lt;/h4>
&lt;p>Free disk space by cleaning up old docker entities, mostly stopped containers and images.&lt;/p>
&lt;blockquote>
&lt;p class="warning">&lt;code>docker system prune --force&lt;/code> might take some time. do not run container updates meanwhile as it could confuse docker (problems with port allocations)&lt;/p>
&lt;/blockquote>
&lt;h4 id="4-appsrestart_unhealthysh" class="paragraph-header">4. &lt;code>/apps/restart_unhealthy.sh&lt;/code> &lt;a
href="#4-appsrestart_unhealthysh">&lt;/a>&lt;/h4>
&lt;p>Docker detects failing health checks but will happily ignore them. Docker Swarm (or Kubernetes) on the other hand will restart unhealthy containers. That missing feature can be corrected with an
&lt;a href="https://github.com/willfarrell/docker-autoheal" target="_blank" rel="noopener noreferrer">extra container&lt;/a> or a really simple script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>docker ps --filter &lt;span style="color:#8be9fd;font-style:italic">health&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>unhealthy --format &lt;span style="color:#f1fa8c">&amp;#34;docker restart {{.ID}}&amp;#34;&lt;/span> | bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="general-advice" class="paragraph-header">General advice &lt;a
href="#general-advice">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add a &lt;code>mem_limit&lt;/code> for every container, don&amp;rsquo;t forget it!&lt;/li>
&lt;li>If a container has no need to connect to the world (internet or local network) then make all attached Docker Networks &amp;ldquo;internal&amp;rdquo;.&lt;/li>
&lt;li>If addressing a container in the network via it&amp;rsquo;s name fails then set the &lt;code>hostname&lt;/code> explicitly.&lt;/li>
&lt;li>If volumes map to directories on the host (bind mounts) then create the folders before starting the containers. Otherwise docker will create the folders as user root which often causes permission problems.&lt;/li>
&lt;/ul></description></item><item><title>Explaining Database Connection Pooling</title><link>https://knrdl.github.io/posts/db-connection-pooling/</link><pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/db-connection-pooling/</guid><description>&lt;h2 id="the-problem" class="paragraph-header">the problem &lt;a
href="#the-problem">&lt;/a>&lt;/h2>
&lt;p>Connection Pooling is an often overlooked concept when it comes to databases. An inexperienced developer might implement an API backend like this:&lt;/p>
&lt;ol>
&lt;li>HTTP Request comes in&lt;/li>
&lt;li>Open connection to the database&lt;/li>
&lt;li>Execute SQL command and read response&lt;/li>
&lt;li>Close connection to the database (also often forgotten)&lt;/li>
&lt;li>Send HTTP response&lt;/li>
&lt;/ol>
&lt;p>Opening and closing a connection (step 2 &amp;amp; 4) produces load on the database server instance. Beside the number of parallel open connections is limited. That way forgetting to close connections might even make the database unavailable in the long run. Connection pooling solves these issues by keeping a sufficient number of durable connections to the database open.&lt;/p>
&lt;h2 id="the-metaphor" class="paragraph-header">the metaphor &lt;a
href="#the-metaphor">&lt;/a>&lt;/h2>
&lt;figure>
&lt;img src="metaphor.png" alt="metaphor visualization" style="max-height: 375px;">
&lt;/figure>
&lt;p>Metaphor: Between Server and Database exists a tunnel, called network link. In the tunnel is a single track of rails, known as connection. As said, reusing the rails is easier than building new ones everytime. The track of rails carries a single wagon. The wagon transports a SQL command from the Server to the Database and returns the execution result (e.g. selected rows) back. If the wagon is in transit the railway is blocked. No other wagon can use the railway at the same time. Therefore, the tunnel doesn&amp;rsquo;t contain a single railway but a pool of railways. To execute a SQL statement you just need to acquire a free wagon. When the wagon returned from the Database with the SQL response the wagon is put back (into the pool). Now it is usable for another SQL statement. If all wagons are in transit, you need to enlarge the tunnel and add an addition railway (increase pool size).&lt;/p>
&lt;p>Metaphor goes on: Transactions contain multiple SQL commands. Meaning, a transaction is a chain of wagons. Instead of a single wagon a whole train is on the railway. When it arrives at the Database, it gets processed wagon by wagon (SQL statement by statement). If there is a problem with a wagon the previous wagons are discarded and the whole train is sent back (transaction rollback). But if all wagons are processed successfully the train will return all wagons filled with their results (transaction commit). As a transaction is a train of wagons it is always handled on a single railway. That&amp;rsquo;s why SQL transactions are connection bound.&lt;/p>
&lt;h2 id="the-realization" class="paragraph-header">the realization &lt;a
href="#the-realization">&lt;/a>&lt;/h2>
&lt;p>In practice a connection pool has the following parameter:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;abbr title="Data Source Name">dsn&lt;/abbr>&lt;/strong>: Connection parameter (host, port, user, password, dbname, encryption)&lt;/li>
&lt;li>&lt;strong>min_pool_size&lt;/strong>: the minimum number of opened, parallel connections in the connection pool (e.g. 5)&lt;/li>
&lt;li>&lt;strong>max_pool_size&lt;/strong>: the maximum number of opened, parallel connections in the connection pool (e.g. 25)&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s highly recommendable to set a &lt;em>max_pool_size&lt;/em> for safety reasons. Otherwise, accidental long-running SQL statements might block all connection capacities of the database. In this situation the connection pooler will open up more and more connections until the database can&amp;rsquo;t handle anymore. Now the problem is the same as described above. With a &lt;em>max_pool_size&lt;/em> set, the application will crash before with an error message like &amp;ldquo;connection pool exhausted&amp;rdquo;.&lt;/p>
&lt;p>A good implementation might work as follows:&lt;/p>
&lt;ol>
&lt;li>The Server is starting.&lt;/li>
&lt;li>The connection pooler opens the &lt;em>min_pool_size&lt;/em> number of connections to the Database.&lt;/li>
&lt;li>When the pooler is done the Server is ready to accept requests.&lt;/li>
&lt;li>When an HTTP request comes in a connection is acquired from the connection pool.&lt;/li>
&lt;li>The SQL statement gets executed.&lt;/li>
&lt;li>Afterwards the connection is put back into the connection pool.&lt;/li>
&lt;li>The HTTP request gets a response.&lt;/li>
&lt;/ol>
&lt;p>Most modern database drivers should include a connection pooling mechanism. Otherwise, there are separate tools like PgBouncer to get the job done.&lt;/p></description></item><item><title>How to stop your Raspberry Pi from eating SD Cards</title><link>https://knrdl.github.io/posts/raspberrypi-eating-sd-cards/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/raspberrypi-eating-sd-cards/</guid><description>&lt;h2 id="problem" class="paragraph-header">Problem &lt;a
href="#problem">&lt;/a>&lt;/h2>
&lt;p>SD (or MicroSD) Cards are cheap flash storage. Their lifetime is limited by the performable write operations. If their end of life is reached, they don&amp;rsquo;t work at all or read data unreliably.&lt;/p>
&lt;p>A Raspberry Pi produces more IO operations than a typical digital camera (which SD Cards are conceptualized for). The load is mostly produced by writing:&lt;/p>
&lt;ul>
&lt;li>Temporary files in &lt;code>/tmp/&lt;/code>&lt;/li>
&lt;li>Variable files in &lt;code>/var/&lt;/code>&lt;/li>
&lt;li>The swap file in &lt;code>/var/swap&lt;/code>&lt;/li>
&lt;li>Files in other application and user specific directories&lt;/li>
&lt;/ul>
&lt;p>It also depends on the usage of the Pi: e.g. compiling a big pile of software on the Pi is never a good idea in terms of SD Card lifetime.&lt;/p>
&lt;p>It&amp;rsquo;s possible to run a Pi only with a SD Card for a long time. One of my Pi&amp;rsquo;s now runs successfully for more than 5 years that way. However, you can&amp;rsquo;t tell it beforehand.&lt;/p>
&lt;h2 id="solution" class="paragraph-header">Solution &lt;a
href="#solution">&lt;/a>&lt;/h2>
&lt;p>So the solution is to reduce the IO operations performed against the SD Card. A simple attempt is to disable swapping: &lt;code>sudo systemctl disable --now dphys-swapfile&lt;/code>. A better alternative is moving write intense directories to an external drive. There are two options:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Option A&lt;/strong>: The Raspberry boots directly from a USB drive (e.g. USB thumb drive, SSD or HDD). No SD Card required.&lt;/li>
&lt;li>&lt;strong>Option B&lt;/strong>: The Raspberry boots from the SD Card and mounts an external USB drive where the heavy disk IO is performed later on.&lt;/li>
&lt;/ul>
&lt;h3 id="option-a---fresh-installation" class="paragraph-header">Option A - Fresh installation &lt;a
href="#option-a---fresh-installation">&lt;/a>&lt;/h3>
&lt;p>This option is pretty easy to realize, just flash the OS image (e.g. Raspberry Pi OS, formerly known as Raspbian) to the USB drive. However, it might not work with all kinds of USB drives. Also, a cheap USB thumb drive might have the same problems as a SD Card. Therefore, a durable SSD should be used instead. An old HDD is also a valid alternative. But your Pi might crash if spinning up the HDD consumes more power than can be supplied.&lt;/p>
&lt;h3 id="option-b---external-disk" class="paragraph-header">Option B - External disk &lt;a
href="#option-b---external-disk">&lt;/a>&lt;/h3>
&lt;p>This is useful if your Pi is already set up and running. The separation will split the filestorage into static files (stored on the SD Card) and dynamic files (stored on the USB drive).&lt;/p>
&lt;p>You need to copy the dynamic files to the external drive. But first you should stop all running applications to prevent inconsistency when copying files.&lt;/p>
&lt;p>Disable the swap:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo swapoff -a &lt;span style="color:#6272a4"># disable the swap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /proc/swaps &lt;span style="color:#6272a4"># check that no swap is active&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mount the external usb drive. In the example it has the Label &amp;ldquo;usb0&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ls /dev/disk/by-label/usb0 &lt;span style="color:#6272a4"># check the device file exists&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkdir -p /media/usb0 &lt;span style="color:#6272a4"># create the mountpoint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mount -o defaults /dev/disk/by-label/usb0 /media/usb0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Copy all directories with dynamic data (at least &lt;code>/tmp&lt;/code> and &lt;code>/var&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo cp -ar /tmp/ /media/usb0/tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo cp -ar /var/ /media/usb0/var
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p class="info">It&amp;rsquo;s optional to copy &lt;code>/tmp&lt;/code> as it only contains ephemeral data. But the directory must exist and have the correct permissions set!&lt;/p>
&lt;/blockquote>
&lt;p>Add to &lt;code>/etc/fstab&lt;/code> the new mount records:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>/dev/disk/by-label/usb0 /media/usb0 ext4 defaults 0 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/media/usb0/var /var none bind 0 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/media/usb0/tmp /tmp none bind 0 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The external drive will be mounted to &lt;code>/media/usb0&lt;/code>. The directories &lt;code>/tmp&lt;/code> and &lt;code>/var&lt;/code> (dynamic data) will be pointed to the corresponding directories on the external device.&lt;/p>
&lt;blockquote>
&lt;p class="warning">The external drive is mounted with option &lt;code>defaults&lt;/code>. If the disk is not connected or cannot be read, the raspi will not boot! As a countermeasure the options &lt;code>defaults,nofail&lt;/code> could be used. But then the data will be written to the SD card in case of a disk failure. Inconsistent data would be the result.&lt;/p>
&lt;/blockquote>
&lt;p>Now reboot the Pi: &lt;code>sudo reboot&lt;/code>.&lt;/p>
&lt;p>Check that everything is working:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>touch /tmp/fs.test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls /media/usb0/fs/tmp/fs.test &lt;span style="color:#6272a4"># should output the filepath&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the swap is not reactivated yet, run &lt;code>sudo swapon /var/swap&lt;/code>.&lt;/p></description></item><item><title>LUKS: Encrypted data volumes</title><link>https://knrdl.github.io/posts/luks-data-volumes/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/luks-data-volumes/</guid><description>&lt;p>To realize encrypted data volumes, there are various tools for different use cases:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Veracrypt&lt;/strong> works cross-platform, predefined volume sizes&lt;/li>
&lt;li>&lt;strong>Gocryptfs&lt;/strong> encrypts transparent, dynamic storage usage&lt;/li>
&lt;li>&lt;strong>Restic&lt;/strong> encrypts backups, network capable, can do versioning&lt;/li>
&lt;li>&lt;strong>LUKS&lt;/strong> provides full disk encryption for linux systems&lt;/li>
&lt;/ul>
&lt;p>But LUKS can also be used for regular data volumes which behave a lot like Veracrypt volumes.&lt;/p>
&lt;h3 id="1-create-a-volume" class="paragraph-header">1. Create a volume &lt;a
href="#1-create-a-volume">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir -p ~/volumes/ &lt;span style="color:#6272a4"># here the encrypted volume files will be stored&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install cryptsetup pv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#ff79c6">if&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>/dev/zero &lt;span style="color:#8be9fd;font-style:italic">bs&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>1M &lt;span style="color:#8be9fd;font-style:italic">count&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">10240&lt;/span> | pv | dd &lt;span style="color:#8be9fd;font-style:italic">of&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>~/volumes/vol1.luks &lt;span style="color:#6272a4"># will create a 1MiB * 10240 = 10GiB file, called &amp;#34;vol1.luks&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cryptsetup -y -v luksFormat ~/volumes/vol1.luks &lt;span style="color:#6272a4"># here you have to enter the passphrase to protect the new volume&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo cryptsetup luksOpen ~/volumes/vol1.luks vol1 &lt;span style="color:#6272a4"># provide the volume as a device located at /dev/mapper/vol1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo cryptsetup -v status vol1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkfs.ext4 /dev/mapper/vol1 &lt;span style="color:#6272a4"># create filesystem inside the volume&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p ~/volumes/vol1/ &lt;span style="color:#6272a4"># the volume will also be mounted in the &amp;#34;volumes&amp;#34; directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mount /dev/mapper/vol1 ~/volumes/vol1/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown &lt;span style="color:#8be9fd;font-style:italic">$USER&lt;/span>:&lt;span style="color:#8be9fd;font-style:italic">$USER&lt;/span> -R ~/volumes/vol1/ &lt;span style="color:#6272a4"># give current user ownership to work with the volume&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df -H &lt;span style="color:#6272a4"># shows disk usage inside the volume&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo umount /dev/mapper/vol1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo cryptsetup luksClose vol1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pv&lt;/code> adds the progress bar for &lt;code>dd&lt;/code> and can be omitted.&lt;/p>
&lt;p>The blocksize provided to &lt;code>dd&lt;/code> will be overwritten when creating a filesystem inside the container. So it has no impact on the performance later on.&lt;/p>
&lt;p>The command &amp;ldquo;luksFormat&amp;rdquo; will figure out good encryption parameters per default. But this requires a decent up-to-date version.&lt;/p>
&lt;h3 id="2-open-the-volume" class="paragraph-header">2. Open the volume &lt;a
href="#2-open-the-volume">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo cryptsetup luksOpen ~/volumes/vol1.luks vol1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mount /dev/mapper/vol1 ~/volumes/vol1/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-close-the-volume" class="paragraph-header">3. Close the volume &lt;a
href="#3-close-the-volume">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo umount /dev/mapper/vol1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo cryptsetup luksClose vol1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Wireguard: Client/Server - Setup</title><link>https://knrdl.github.io/posts/wireguard-setup/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/wireguard-setup/</guid><description>&lt;h2 id="approach" class="paragraph-header">Approach &lt;a
href="#approach">&lt;/a>&lt;/h2>
&lt;p>Wireguard is a modern VPN protocol. Per default all nodes are treated equally, named peers. Let&amp;rsquo;s build a point-to-point connection:&lt;/p>
&lt;ul>
&lt;li>Client: Wireguard running, &lt;strong>no&lt;/strong> port opened&lt;/li>
&lt;li>Server: Wireguard running, &lt;strong>one&lt;/strong> port opened&lt;/li>
&lt;/ul>
&lt;p>Wireguard uses UDP packets only. If an incoming request is invalid (wrong encryption key) then it will be dropped silently. Thereby additional security measures like fail2ban are not necessary.&lt;/p>
&lt;h2 id="setup" class="paragraph-header">Setup &lt;a
href="#setup">&lt;/a>&lt;/h2>
&lt;h3 id="1-installation" class="paragraph-header">1. Installation &lt;a
href="#1-installation">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt install wireguard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A docker based installation is
&lt;a href="https://docs.linuxserver.io/images/docker-wireguard" target="_blank" rel="noopener noreferrer">possible&lt;/a>. But as wireguard requires a separate kernel module, there are no isolation benefits.&lt;/p>
&lt;h3 id="2-generate-keys" class="paragraph-header">2. Generate keys &lt;a
href="#2-generate-keys">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Client:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg genkey &amp;gt; client.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg pubkey &amp;lt; client.key &amp;gt; client.pub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Server:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ wg genkey &amp;gt; server.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ wg pubkey &amp;lt; server.key &amp;gt; server.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-config-files" class="paragraph-header">3. Config files &lt;a
href="#3-config-files">&lt;/a>&lt;/h3>
&lt;p>On the client in &lt;code>/etc/wireguard/wg0.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">PrivateKey&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">XXXXX # client.key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">Address&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">192.168.7.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">ListenPort&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">51822&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">PublicKey&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">XXXXX # server.pub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">Endpoint&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">fqdn:51821 # public fqdn (domain) or static ip addr of the server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">AllowedIPs&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">192.168.7.1/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">PersistentKeepalive&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On the server in &lt;code>/etc/wireguard/wg0.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">PrivateKey&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">XXXXX # server.key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">Address&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">192.168.7.1/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">ListenPort&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">51821&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">PublicKey&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">XXXXX # client.pub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">AllowedIPs&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">192.168.7.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">PersistentKeepalive&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wireguard won&amp;rsquo;t send any messages per default if there is no traffic. If both peers provide an &lt;code>Endpoint&lt;/code> in the config (Server - Server Setup), this works well. But in the presented setup keepalives are required for the client to contact the server. &lt;code>PersistentKeepalive = 25&lt;/code> will send a ping every 25sec through the tunnel.&lt;/p>
&lt;h3 id="4-up-and-running" class="paragraph-header">4. Up and running &lt;a
href="#4-up-and-running">&lt;/a>&lt;/h3>
&lt;p>&lt;code>wg-quick&lt;/code> is a convenient wrapper around the &lt;code>wireguard&lt;/code> and &lt;code>ip&lt;/code> commands. It allows to configure wireguard tunnels in a declarative fashion. Config files are stored as &lt;code>/etc/wireguard/IFNAME.conf&lt;/code>.&lt;/p>
&lt;p>Setup autostart on both hosts and check logs after startup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl &lt;span style="color:#8be9fd;font-style:italic">enable&lt;/span> --now wg-quick@wg0.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo journalctl -u wg-quick@wg0.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="5-test-connection" class="paragraph-header">5. Test connection &lt;a
href="#5-test-connection">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ping 192.168.7.2 &lt;span style="color:#6272a4"># on the server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ping 192.168.7.1 &lt;span style="color:#6272a4"># on the client&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="6-restart-a-tunnel" class="paragraph-header">6. Restart a tunnel &lt;a
href="#6-restart-a-tunnel">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>wg-quick down wg0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg-quick up wg0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage" class="paragraph-header">Usage &lt;a
href="#usage">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Server: bind a port to the wireguard tunnel address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -it --rm -p 192.168.7.1:80:80 nginx:alpine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Client: query a connection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl 192.168.7.1:80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="limitations" class="paragraph-header">Limitations &lt;a
href="#limitations">&lt;/a>&lt;/h2>
&lt;p>This wireguard setup is fairly simple. A tunneled client/server relation is realized.&lt;/p>
&lt;p>However, there is no routing of container traffic through the tunnel in place. This would require additional network config on the server host.&lt;/p></description></item><item><title>Docker Registry Mirror</title><link>https://knrdl.github.io/posts/docker-registry-mirror/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/docker-registry-mirror/</guid><description>&lt;h2 id="concept" class="paragraph-header">Concept &lt;a
href="#concept">&lt;/a>&lt;/h2>
&lt;p>A docker-registry stores docker-images, composed of:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>metadata&lt;/strong>: image names and tags&lt;/li>
&lt;li>&lt;strong>blobs&lt;/strong>: actual image contents&lt;/li>
&lt;/ul>
&lt;p>The most famous public docker-registry is
&lt;a href="https://hub.docker.com" target="_blank" rel="noopener noreferrer">DockerHub&lt;/a>. DockerHub applies a rate-limiting for downloading blobs. The fetching of metadata is not sanctioned. Therefore, a local docker-registry mirror can be used to circumvent DockerHub&amp;rsquo;s rate-limiting. This might also reduce the bandwidth usage of your ISP connection.&lt;/p>
&lt;p>For metadata retrieval the docker-registry mirror will serve as a simple proxy server to the upstream (e.g. DockerHub). If you retrieve a docker-image via the mirror the blobs are stored locally by the mirror. That way the mirror can serve as a cache for further requests. For example, when multiple servers deploy the same docker-image, only the first request will be a cache-miss. As the metadata records are always fetched from upstream, there is no risk of serving outdated docker-images.&lt;/p>
&lt;h2 id="setup" class="paragraph-header">Setup &lt;a
href="#setup">&lt;/a>&lt;/h2>
&lt;h3 id="server" class="paragraph-header">Server &lt;a
href="#server">&lt;/a>&lt;/h3>
&lt;p>The registry mirror is a simple docker container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">version&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;3.9&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">registry-mirror&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">image&lt;/span>: registry:2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">hostname&lt;/span>: registry-mirror
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">REGISTRY_PROXY_REMOTEURL&lt;/span>: https://registry-1.docker.io &lt;span style="color:#6272a4"># Mirror DockerHub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - reverse_proxy_net &lt;span style="color:#6272a4"># just an example&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">reservations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">memory&lt;/span>: 16m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">memory&lt;/span>: 250m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It should always be exposed via HTTPS to the clients, by a tls-terminating reverse-proxy. The registry-mirror runs http on port 5000.&lt;/p>
&lt;p>Cached images can be listed via &lt;code>curl https://registry-mirror.example.org/v2/_catalog&lt;/code>.&lt;/p>
&lt;h3 id="clients" class="paragraph-header">Clients &lt;a
href="#clients">&lt;/a>&lt;/h3>
&lt;h4 id="docker" class="paragraph-header">Docker &lt;a
href="#docker">&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p class="warning">On the server which should execute the registry-mirror run &lt;code>docker pull registry:2&lt;/code> first, to prevent the chicken or egg problem.&lt;/p>
&lt;/blockquote>
&lt;p>To make Docker use the registry mirror, add to &lt;code>/etc/docker/daemon.json&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;https://registry-mirror.example.org&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then restart the docker daemon: &lt;code>sudo systemctl restart docker.service&lt;/code>&lt;/p>
&lt;h4 id="podman" class="paragraph-header">Podman &lt;a
href="#podman">&lt;/a>&lt;/h4>
&lt;p>Add to &lt;code>$HOME/.config/containers/registries.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[[registry.mirror]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">location&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;registry-mirror.example.org&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="kaniko" class="paragraph-header">Kaniko &lt;a
href="#kaniko">&lt;/a>&lt;/h4>
&lt;p>To make Kaniko use the mirror, run it with the flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>/kaniko/executor --registry-mirror&lt;span style="color:#ff79c6">=&lt;/span>registry-mirror.example.org ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="operations" class="paragraph-header">Operations &lt;a
href="#operations">&lt;/a>&lt;/h2>
&lt;p>The registry mirror might be part of the critical path for high availability. Make sure all hosts are provided with their docker-images before shutting it down for maintenance etc.&lt;/p>
&lt;p>There is no authentication in place, anybody with access can download arbitrary images. Therefore, the registry mirror should only be exposed to the server&amp;rsquo;s network segment.&lt;/p>
&lt;p>There is no storage limit per default and old blobs will not be pruned automatically. An attacker might crash the server by querying too many images. As countermeasure a storage quota should be applied. Also restarting the mirror container from time to time (e.g. patch-day server reboots) helps to reduce the storage usage.&lt;/p></description></item><item><title>Password-protected resources on static-site webhosters</title><link>https://knrdl.github.io/posts/password-protected-static-sites/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/password-protected-static-sites/</guid><description>&lt;h2 id="scenario" class="paragraph-header">Scenario &lt;a
href="#scenario">&lt;/a>&lt;/h2>
&lt;p>Some web hosters only serve static files and allow no config changes to the webserver. But maybe you want to provide files which are not intended for public view, for example sharing a file with a friend. Therefore, the best you can do is protecting files by giving them names which are hard to guess. Obviously these files should also not be linked somewhere publicly at all.&lt;/p>
&lt;p>This concept can be expanded with a clientside-only authentication mechanism, as described next.&lt;/p>
&lt;h2 id="login-process" class="paragraph-header">Login process &lt;a
href="#login-process">&lt;/a>&lt;/h2>
&lt;h3 id="1-the-user-opens-the-webpage" class="paragraph-header">1. The user opens the webpage &lt;a
href="#1-the-user-opens-the-webpage">&lt;/a>&lt;/h3>
&lt;p>A login dialog with password input is shown to the user. The user inputs a password.&lt;/p>
&lt;div style="text-align: center; font-size: 20pt">
&lt;a href="demo" target="_blank">&amp;gt;&amp;gt; click here for a demo &amp;lt;&amp;lt;&lt;/a>
&lt;/div>
&lt;h3 id="2-clientside-password-hashing" class="paragraph-header">2. Clientside password hashing &lt;a
href="#2-clientside-password-hashing">&lt;/a>&lt;/h3>
&lt;p>Now the password must be locally digested on the webpage. A hashing algorithm suitable for passwords must be applied. PBKDF2 as provided by the WebCryptoAPI is acceptable with an
&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html" target="_blank" rel="noopener noreferrer">iteration count of 310,000&lt;/a> in HMAC-SHA-256 mode. The hash should be salted with
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params" target="_blank" rel="noopener noreferrer">at least 16 bytes of randomness&lt;/a>. The salt can be stored as plaintext alongside the login page. Generating a salt is as easy as &lt;code>dd if=/dev/urandom bs=1 count=16 | base64&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/** clientside hashing a password
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @param {string} password - as provided by user
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @param {string} salt - as base64 encoded
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @return {Promise&amp;lt;string&amp;gt;} - the hash value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">async&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> hashPassword(password, salt) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> passwordKey &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.crypto.subtle.importKey(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;raw&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">new&lt;/span> TextEncoder().encode(password),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {name&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;PBKDF2&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">false&lt;/span>, &lt;span style="color:#6272a4">// key should not be extractable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> [&lt;span style="color:#f1fa8c">&amp;#34;deriveBits&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> hashBuffer &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.crypto.subtle.deriveBits(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#f1fa8c">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;PBKDF2&amp;#34;&lt;/span>, salt&lt;span style="color:#ff79c6">:&lt;/span> base64ToArrayBuffer(salt), &lt;span style="color:#f1fa8c">&amp;#34;iterations&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#bd93f9">310_000&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;hash&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;SHA-256&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> passwordKey,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bd93f9">256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> hashArray &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Array&lt;/span>.from(&lt;span style="color:#ff79c6">new&lt;/span> Uint8Array(hashBuffer))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> hashArray.map(b =&amp;gt; b.toString(&lt;span style="color:#bd93f9">16&lt;/span>).padStart(&lt;span style="color:#bd93f9">2&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;0&amp;#39;&lt;/span>)).join(&lt;span style="color:#f1fa8c">&amp;#39;&amp;#39;&lt;/span>).toUpperCase()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/** converts a base64 encoded string into an arraybuffer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @param {string} base64text
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * @return {ArrayBuffer}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> base64ToArrayBuffer(base64text) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> bytes &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Uint8Array(base64text.length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> base64text.length; i&lt;span style="color:#ff79c6">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bytes[i] &lt;span style="color:#ff79c6">=&lt;/span> base64text.charCodeAt(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> bytes.buffer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-redirect-to-the-secret-path" class="paragraph-header">3. Redirect to the secret path &lt;a
href="#3-redirect-to-the-secret-path">&lt;/a>&lt;/h3>
&lt;p>The created hash-value is taken as a path parameter for the url. As UX improvement, a preflight fetch request checks if the entered password is correct. If that&amp;rsquo;s the case, a redirect is performed. The user is now authenticated.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> password &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">document&lt;/span>.querySelector(&lt;span style="color:#f1fa8c">&amp;#39;input[type=password]&amp;#39;&lt;/span>).value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> salt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;ChangeTheSaltValueASAP==&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> hashValue &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">await&lt;/span> hashPassword(password, salt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> url &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.location.origin &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.location.pathname &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> hashValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fetch(url).then(&lt;span style="color:#ff79c6">async&lt;/span> res =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res.ok)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">window&lt;/span>.location.replace(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">throw&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Error&lt;/span>(&lt;span style="color:#ff79c6">await&lt;/span> res.text())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}).&lt;span style="color:#ff79c6">catch&lt;/span>(err =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alert(&lt;span style="color:#f1fa8c">&amp;#39;Password wrong&amp;#39;&lt;/span>) &lt;span style="color:#6272a4">// todo: evaluate error msg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p class="info">It&amp;rsquo;s possible to create user specific protected paths by concatenating the static salt with a provided additional userID. That way separate accounts with userID and password as credentials would be possible.&lt;/p>
&lt;/blockquote>
&lt;h2 id="pros" class="paragraph-header">Pros &lt;a
href="#pros">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>As the calculation-heavy hashing is performed exclusively clientside, there is no extra load serverside. For better scalability this approach can even be combined with a CDN.&lt;/li>
&lt;li>A Static Site Generator (SSG), like Hugo, can be used to automatically generate protected resource paths from predefined passwords. The SSG only needs to perform hashing on creation of a new protected resource.&lt;/li>
&lt;li>The hashing works as key stretching operation to generate urls which are long enough to be unsearchable.
A brute-force attacker who can perform a billion requests per second would need &lt;math>
&lt;msup>
&lt;mi>2&lt;/mi>
&lt;mrow>
&lt;mn>256&lt;/mn>
&lt;/mrow>
&lt;/msup>
&lt;mo>/&lt;/mo>
&lt;msup>
&lt;mi>10&lt;/mi>
&lt;mrow>
&lt;mn>9&lt;/mn>
&lt;/mrow>
&lt;/msup>
&lt;mo>≈&lt;/mo>
&lt;msup>
&lt;mi>10&lt;/mi>
&lt;mrow>
&lt;mn>60&lt;/mn>
&lt;/mrow>
&lt;/msup> &lt;mi> years&lt;/mi>
&lt;/math>. That way a bruteforce attack for the passwords still is the most efficient one.&lt;/li>
&lt;li>The user can bookmark protected resource paths, so there is no further login required (ux improvement).&lt;/li>
&lt;/ul>
&lt;h2 id="cons" class="paragraph-header">Cons &lt;a
href="#cons">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>The approach doesn&amp;rsquo;t scale well for many user. As a workaround there might be group-contents defined and each &amp;ldquo;user protected path&amp;rdquo; just contains a redirect to the &amp;ldquo;group protected path&amp;rdquo;. Otherwise, there will be a lot of duplication.&lt;/li>
&lt;li>A dynamic creation of user accounts is not possible. But as it&amp;rsquo;s all about static hosting, this is out of scope.&lt;/li>
&lt;li>Users can give unintentional access to third parties by just copypasting the url. Maybe it&amp;rsquo;s possible to cloak the shown url with a combination of the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noopener noreferrer">History API&lt;/a>&amp;rsquo;s &lt;code>replaceState&lt;/code> and the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base" target="_blank" rel="noopener noreferrer">base tag&lt;/a>? Or just provide the protected content as &lt;abbr title="Single Page Application">SPA&lt;/abbr> with a rewritten display url.&lt;/li>
&lt;li>The secret key must be transported as part of the url to the server. That way sensitive information will be written into the access logfiles of webserver and proxies. This violates security goals and is definitely not best practice!&lt;/li>
&lt;li>Accidentally enabling public
&lt;a href="https://nginx.org/en/docs/http/ngx_http_autoindex_module.html" target="_blank" rel="noopener noreferrer">directory listings&lt;/a> will also break any security goals apart.&lt;/li>
&lt;li>There is a tradeoff between hashing duration and security. The WebCryptoAPI allows hashing to be performant but only implements PBKDF2. A js/wasm library might provide a better algorithm but perhaps unsatisfying performance. It&amp;rsquo;s a pity that the WebCryptoAPI doesn&amp;rsquo;t support a more elaborated password hashing algorithm, e.g. bcrypt, scrypt, argon2id.&lt;/li>
&lt;li>There is no ratelimiting applicable: A brute force attacker is only limited by the network transmission time and calculation cost for a password hash, which can both be heavily parallelized. As a result the password must be strong enough, e.g. not trivially constructable from password-list permutations.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion" class="paragraph-header">Conclusion &lt;a
href="#conclusion">&lt;/a>&lt;/h2>
&lt;p>Is it possible? Yes, absolutely! And should we implement this? Please don&amp;rsquo;t, if it&amp;rsquo;s avoidable in any way. The explained approach is only useful in a very specific scenario (see above). In almost all cases there would be a more standard-applying way to realize that, for example using good old HTTP Basic Auth. Or initiate a session after login instead, so there is no further exchange of highly privileged key material (user credentials) required.&lt;/p></description></item><item><title>The magic world of HTML inputs</title><link>https://knrdl.github.io/posts/html5-input-elements/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/html5-input-elements/</guid><description>&lt;p>The HTML &lt;code>input&lt;/code> element is the principal construct when it comes to site local interactivity from user provided data on the web. Here are my 5 cents to the topic.&lt;/p>
&lt;h2 id="button-tag" class="paragraph-header">Button Tag &lt;a
href="#button-tag">&lt;/a>&lt;/h2>
&lt;p>There is a &lt;code>&amp;lt;input type=&amp;quot;button&amp;quot;&amp;gt;&lt;/code>. However, it only allows unformatted text as button content. Use &lt;code>&amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;&lt;/code> instead. The &lt;code>type=&amp;quot;button&amp;quot;&lt;/code> might seems redundant, but it prevents browsers from interpreting the button as &lt;code>type=&amp;quot;submit&amp;quot;&lt;/code> if there is only one button in a &lt;code>&amp;lt;form&amp;gt;&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;simple button&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">button&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;button&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">span&lt;/span> &lt;span style="color:#50fa7b">style&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;color:orange&amp;#34;&lt;/span>&amp;gt;styled button&amp;lt;/&lt;span style="color:#ff79c6">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;input type="button" value="simple button">
&lt;button type="button">
&lt;span style="color:orange">styled button&lt;/span>
&lt;/button>
&lt;h2 id="example-values-are-no-placeholders" class="paragraph-header">Example values are no placeholders! &lt;a
href="#example-values-are-no-placeholders">&lt;/a>&lt;/h2>
&lt;p>Providing the attribute &lt;code>placeholder&lt;/code> is a good idea. But it&amp;rsquo;s easy for users to mistake placeholders for actual values. For example: What is the selected limit value here?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>Wrong: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;100&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Correct with default: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;limit&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;100&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Correct without default: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;limit&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>Wrong: &lt;input type="number" placeholder="100" value="">&lt;/div>
&lt;div>Correct with default: &lt;input type="number" placeholder="limit" value="100">&lt;/div>
&lt;div>Correct without default: &lt;input type="number" placeholder="limit" value="">&lt;/div>
&lt;blockquote>
&lt;p class="info">Using actual values as placeholders is only a good idea, if the chosen value is always the default value. If there is no default, don&amp;rsquo;t misuse an example value as a placeholder!&lt;/p>
&lt;/blockquote>
&lt;h2 id="use-the-system-picker" class="paragraph-header">Use the system picker &lt;a
href="#use-the-system-picker">&lt;/a>&lt;/h2>
&lt;p>Often the first idea to create date or color pickers is to use one of the dozen available npm-modules. But these solutions offer no system integration and tend to be hacky or misfitting on mobile screens. Instead, the html5 elements provide quite an acceptable user experience on all modern devices.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>Date input: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;date&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;2022-01-01&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Time input: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;time&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;14:00&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Color input: &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;color&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;#123456&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>Date input: &lt;input type="date" value="2022-01-01">&lt;/div>
&lt;div>Time input: &lt;input type="time" value="03:00">&lt;/div>
&lt;div>Color input: &lt;input type="color" value="#123456">&lt;/div>
&lt;p>It&amp;rsquo;s even possible to use the picker dialog without the corresponding input field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">button&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">onclick&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;document.getElementById(&amp;#39;date-input&amp;#39;).showPicker()&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;date&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">style&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;position: absolute; visibility: hidden;&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">id&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;date-input&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 📆 Select a date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;button type="button" onclick="document.getElementById('date-input').showPicker()">
&lt;input type="date" style="position: absolute; visibility: hidden;" id="date-input">
📆 Select a date
&lt;/button>
&lt;h2 id="autocomplete" class="paragraph-header">Autocomplete &lt;a
href="#autocomplete">&lt;/a>&lt;/h2>
&lt;p>Autocompleting text is pretty easy as well. However, if more sophisticated suggestions are required (formatted text, images, &amp;hellip;) then you will have to build it on your own.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">list&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;autocomplete-values&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">placeholder&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Search a location&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">datalist&lt;/span> &lt;span style="color:#50fa7b">id&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;autocomplete-values&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Berlin&amp;#34;&lt;/span>&amp;gt;Berlin&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Hamburg&amp;#34;&lt;/span>&amp;gt;Hamburg&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Munich&amp;#34;&lt;/span>&amp;gt;Munich&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">datalist&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;input list="autocomplete-values" placeholder="Search a location">
&lt;datalist id="autocomplete-values">
&lt;option value="Berlin">Berlin&lt;/option>
&lt;option value="Hamburg">Hamburg&lt;/option>
&lt;option value="Munich">Munich&lt;/option>
&lt;/datalist>
&lt;blockquote>
&lt;p class="warning">Old browsers might perform a startswith-search instead of a contains-search to provide completion results!&lt;/p>
&lt;/blockquote>
&lt;p>Autocomplete suggestions can be updated dynamically. With Svelte it might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-svelte" data-lang="svelte">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">datalist&lt;/span> &lt;span style="color:#50fa7b">id&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;list-id&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#ff79c6">#each&lt;/span> items &lt;span style="color:#ff79c6">as&lt;/span> item}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">option&lt;/span> &lt;span style="color:#50fa7b">value&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>{item}&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&amp;gt;{item}&amp;lt;/&lt;span style="color:#ff79c6">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#ff79c6">/each&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">datalist&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="take-advantage-of-semantics" class="paragraph-header">Take advantage of semantics &lt;a
href="#take-advantage-of-semantics">&lt;/a>&lt;/h2>
&lt;p>HTML is a semantic markup language. While &lt;code>&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code> works, it&amp;rsquo;s sometimes not the best fit:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;password&amp;quot; autocomplete=&amp;quot;new-password&amp;quot;&amp;gt;&lt;/code> allows the browser to generate and store secure passwords&lt;/li>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;password&amp;quot; autocomplete=&amp;quot;current-password&amp;quot;&amp;gt;&lt;/code> allows the browser to autofill a stored password&lt;/li>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt;&lt;/code> allows the browser to display a phone number keypad&lt;/li>
&lt;li>&lt;code>&amp;lt;input type=&amp;quot;search&amp;quot;&amp;gt;&lt;/code> allows the user to define a custom keyword as additional search engine for the browser&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Use labels to combine input description and control element:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">label&lt;/span>&amp;gt;Select a value:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;range&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;label>Select a value:
&lt;input type="range">
&lt;/label>&lt;/p>
&lt;h2 id="input-validation" class="paragraph-header">Input Validation &lt;a
href="#input-validation">&lt;/a>&lt;/h2>
&lt;h3 id="1-define-constraints" class="paragraph-header">1. Define Constraints &lt;a
href="#1-define-constraints">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">form&lt;/span> &lt;span style="color:#50fa7b">class&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;validate&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">pattern&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;[^@]+@\w+\.\w+&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;url&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">pattern&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;^https?://.+&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">minlength&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">maxlength&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;8&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">pattern&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;\w+&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;number&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">required&lt;/span> &lt;span style="color:#50fa7b">min&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">max&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;1000&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-visual-feedback" class="paragraph-header">2. Visual Feedback &lt;a
href="#2-visual-feedback">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">form&lt;/span>.&lt;span style="color:#50fa7b">validate&lt;/span> &lt;span style="color:#ff79c6">input&lt;/span>:invalid {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">border&lt;/span>: &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#8be9fd">px&lt;/span> &lt;span style="color:#ff79c6">solid&lt;/span> &lt;span style="color:#ff79c6">red&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">form&lt;/span>.&lt;span style="color:#50fa7b">validate&lt;/span> &lt;span style="color:#ff79c6">input&lt;/span>:valid {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">border&lt;/span>: &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#8be9fd">px&lt;/span> &lt;span style="color:#ff79c6">solid&lt;/span> &lt;span style="color:#ff79c6">black&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keep in mind that controls like &lt;code>&amp;lt;textare&amp;gt;&lt;/code> or &lt;code>&amp;lt;select&amp;gt;&lt;/code> also use the pseudo-selectors &lt;code>:valid&lt;/code> and &lt;code>:invalid&lt;/code>. They can be combined with e.g. &lt;code>:required&lt;/code> or &lt;code>:focus&lt;/code>.&lt;/p>
&lt;h3 id="3-provide-custom-error-messages" class="paragraph-header">3. Provide custom error messages &lt;a
href="#3-provide-custom-error-messages">&lt;/a>&lt;/h3>
&lt;p>Either via
&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#validating_forms_using_javascript" target="_blank" rel="noopener noreferrer">JavaScript&lt;/a> or via
&lt;a href="https://css-tricks.com/snippets/css/form-validation-styling-on-input-focus/" target="_blank" rel="noopener noreferrer">CSS&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p class="warning">Clientside form validation is an improvement to the user experience but no security measure. All user provided data must be sanitized and strictly validated serverside.&lt;/p>
&lt;/blockquote>
&lt;h2 id="multimedia" class="paragraph-header">Multimedia &lt;a
href="#multimedia">&lt;/a>&lt;/h2>
&lt;p>The file picker &lt;code>&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&lt;/code> can be used to take photos or videos on mobile devices:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;file&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">onchange&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;addPhotos(this.files)&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">accept&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;image/*&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">multiple&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;multiple&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">input&lt;/span> &lt;span style="color:#50fa7b">type&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;file&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">onchange&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;addVideos(this.files)&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">accept&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;video/*&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">multiple&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;multiple&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="foobar" class="paragraph-header">Foobar &lt;a
href="#foobar">&lt;/a>&lt;/h2>
&lt;p>&lt;code>&amp;lt;input type=&amp;quot;image&amp;quot;&amp;gt;&lt;/code> is much like &lt;code>&amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code>, except that it also transmits the xy coordinates where the user clicked on the image. This could be used e.g. to zoom in on a geo map &lt;em>without any javascript&lt;/em>. Click on the image below and watch the url parameter.&lt;/p>
&lt;form>
&lt;input type="image" src="https://tile.openstreetmap.org/11/1098/674.png" width="256" height="256">
&lt;/form>
&amp;copy; OpenStreetMap contributors</description></item><item><title>Conceptualize Docker Networks to be minimal</title><link>https://knrdl.github.io/posts/minimal-docker-networks/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/minimal-docker-networks/</guid><description>&lt;h2 id="introduction" class="paragraph-header">Introduction &lt;a
href="#introduction">&lt;/a>&lt;/h2>
&lt;p>There are three kinds of private ip ranges:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Class&lt;/th>
&lt;th>CIDR&lt;/th>
&lt;th>Last IP&lt;/th>
&lt;th>IPs&lt;/th>
&lt;th>Typical Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>10.0.0.0/8&lt;/td>
&lt;td>10.255.255.255&lt;/td>
&lt;td>16,777,216&lt;/td>
&lt;td>Big Company Network&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>172.16.0.0/12&lt;/td>
&lt;td>172.31.255.255&lt;/td>
&lt;td>1,048,576&lt;/td>
&lt;td>&lt;em>&lt;strong>Docker Network!&lt;/strong>&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>192.168.0.0/16&lt;/td>
&lt;td>192.168.255.255&lt;/td>
&lt;td>65,536&lt;/td>
&lt;td>Home Network&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>So there are about a million IPs available for docker containers in docker networks. However, docker per default splits them up as /24 CIDRs. Therefore, every docker network can include up to
&lt;math>
&lt;msup>
&lt;mi>2&lt;/mi>
&lt;mrow>
(&lt;mn>32&lt;/mn>&lt;mo>-&lt;/mo>&lt;mn>24&lt;/mn>)
&lt;/mrow>
&lt;/msup>
&lt;mo>-&lt;/mo>
&lt;mn>2&lt;/mn>
&lt;mo>=&lt;/mo>
&lt;mn>254&lt;/mn>
&lt;/math>
Container-IPs. The total number of docker networks is limited to
&lt;math>
&lt;msup>
&lt;mi>2&lt;/mi>
&lt;mrow>
(&lt;mn>24&lt;/mn>&lt;mo>-&lt;/mo>&lt;mn>12&lt;/mn>)
&lt;/mrow>
&lt;/msup>
&lt;mo>=&lt;/mo>
&lt;mn>4096&lt;/mn>
&lt;/math>.&lt;/p>
&lt;p>While these defaults are okay, it&amp;rsquo;s possible to run out of address spaces, &lt;strong>especially if private Class B addresses are used elsewhere&lt;/strong> (by other applications/routing). Using more docker networks with fewer containers per network has two benefits: Security and Safety.&lt;/p>
&lt;h2 id="security--safety" class="paragraph-header">Security &amp;amp; Safety &lt;a
href="#security--safety">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Scenario with three containers: gateway, appserver, database.&lt;/p>
&lt;p>It&amp;rsquo;s easy to put all three of them in a single docker network. But this would allow the gateway to access the database, which is not required. Therefore, 2 docker networks should be utilized.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scenario with three containers: gateway, appserver1, appserver2.&lt;/p>
&lt;p>Using a single network to connect the appservers to the gateway, allows appserver1 to talk to appserver2. This might not be desired, if app1 and app2 are two distinct applications.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The security gain is a better separation of trust levels, following the principle of least privilege. Anyway, an advanced attacker can still try OSI-Layer 2 (&amp;ldquo;MAC-Level&amp;rdquo;) sniffing attacks.&lt;/p>
&lt;p>The bigger gain is the safety of the container environment. The impact of configuration mistakes is limited. The architecture is clearer: Confusion about what service the hostname &amp;ldquo;app&amp;rdquo; belongs to is hopefully prevented.&lt;/p>
&lt;p>The cost of this approach is that there might be more docker networks needed than the 4096 possible ones. A config change allows to create more networks.&lt;/p>
&lt;blockquote>
&lt;p class="info">This is just an example! 4096 is a reasonable amount of networks. But if there is only a subspace of private class B addresses available or class C must be used, then things might look different. Per default max 256 docker networks can be produced in class C, which could be limiting.&lt;/p>
&lt;/blockquote>
&lt;h2 id="configuration" class="paragraph-header">Configuration &lt;a
href="#configuration">&lt;/a>&lt;/h2>
&lt;p>In &lt;code>/etc/docker/daemon.json&lt;/code> add:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;default-address-pools&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;base&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;172.16.0.0/12&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#bd93f9">27&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will use the complete Class B private namespace (&lt;code>172.16.0.0/12&lt;/code>). The CIDR per docker network is /27.&lt;/p>
&lt;p>Max docker networks per host:
&lt;math>
&lt;msup>
&lt;mi>2&lt;/mi>
&lt;mrow>
(&lt;mn>27&lt;/mn>&lt;mo>-&lt;/mo>&lt;mn>12&lt;/mn>)
&lt;/mrow>
&lt;/msup>
&lt;mo>=&lt;/mo>
&lt;mn>32,768&lt;/mn>
&lt;/math>&lt;/p>
&lt;p>Max containers per docker network:
&lt;math>
&lt;msup>
&lt;mi>2&lt;/mi>
&lt;mrow>
(&lt;mn>32&lt;/mn>&lt;mo>-&lt;/mo>&lt;mn>27&lt;/mn>)
&lt;/mrow>
&lt;/msup>
&lt;mo>-&lt;/mo>
&lt;mn>2&lt;/mn>
&lt;mo>=&lt;/mo>
&lt;mn>30&lt;/mn>
&lt;/math>&lt;/p></description></item><item><title>How to make your program generate pdf files</title><link>https://knrdl.github.io/posts/pdf-rendering/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/pdf-rendering/</guid><description>&lt;p>PDF files are still highly popular. The user will find all information in a single, human-readable file which is quite durable.
However, the programmatic generation of pdf files can be a bit tricky. A rendering engine is needed to transform the source data into the target pdf file. The source data can be broken up into two parts: templates and dynamic data. The template is a skeleton of the pdf document. It contains static texts, images, styling and positioning rules etc. It also contains field definitions where the dynamic data will be filled in. The process of merging template and dynamic data is done by a templating engine.&lt;/p>
&lt;p>There are multiple technologies applicable.&lt;/p>
&lt;h2 id="office-suites" class="paragraph-header">Office Suites &lt;a
href="#office-suites">&lt;/a>&lt;/h2>
&lt;p>It&amp;rsquo;s pretty easy to generate a pdf file by using an office suite like LibreOffice or Google Docs. It&amp;rsquo;s even possible to automate this with a headless LibreOffice instance. But working with
&lt;a href="https://de.wikipedia.org/wiki/OpenDocument" target="_blank" rel="noopener noreferrer">OpenDocument&lt;/a> files as templates for the pdf creation is not developer friendly (e.g. no git diffs &amp;hellip;). The implementation will be extra hard if the dynamic data also include complicated stuff like styling directives. On the other hand templates might be maintained in a WYSIWYG manner with user know software (basically just the office suite).&lt;/p>
&lt;h2 id="programmatic-drawing" class="paragraph-header">Programmatic drawing &lt;a
href="#programmatic-drawing">&lt;/a>&lt;/h2>
&lt;p>Drawing and writing elements programmatically on the pdf canvas is a pragmatic approach. The template is just a regular pdf file with some blanks. While this approach definitely works for simple documents, it gets harder with increasing document complexity. For example necessary line breaks and text alignments are easy to get wrong. In the long run a more sophisticated approach will be easier to handle.&lt;/p>
&lt;h2 id="latex" class="paragraph-header">Latex &lt;a
href="#latex">&lt;/a>&lt;/h2>
&lt;p>Latex is an extremely powerful and function-rich text processor which can also generate pdf files, of course. Using latex files as templates is also pretty easy because it is just text containing latex rules. The maintainers of the templates must be able to work with latex files, which could be quite a restriction. They need to learn latex first.&lt;/p>
&lt;blockquote>
&lt;p class="warning">The dynamic input is arbitrary data. To prevent &lt;strong>Latex Injections&lt;/strong> the templating engine must escape all dynamic input. Otherwise, an attacker might tamper the generated pdf file or even execute commands on your server (e.g. when the latex flag &lt;code>-shell-escape&lt;/code> is set)!&lt;/p>
&lt;/blockquote>
&lt;p>PDF generation using latex is a solid and well-tested approach.&lt;/p>
&lt;h2 id="webbrowsers" class="paragraph-header">Webbrowsers &lt;a
href="#webbrowsers">&lt;/a>&lt;/h2>
&lt;p>Webbrowsers can render the DOM (web content) of a webpage to a pdf file. This function is regularly exposed in the user interface. It&amp;rsquo;s also available via JavaScript as e.g. &lt;code>window.print()&lt;/code>. However, this is still manual and based on user interaction.&lt;/p>
&lt;p>But a headless browser engine (typically firefox or chromium) can also be executed in the backend. An adapter, called webdriver, is needed to control such an instance, e.g. Selenium, PhantomJs (deprecated) or Puppeteer. Now it&amp;rsquo;s possible to get a pdf via the webdriver out of the headless browser. Keep in mind that it takes some time to spin up a browser instance, fully load and render the webpage and then generate the pdf.&lt;/p>
&lt;p>This approach is really developer (especially web-developer) friendly. Templates might be maintained via a WYSIWYG webpage editor.&lt;/p>
&lt;p>Problematic is the potentially high resource usage of a browser engine. Running too many parallel rendering jobs at the same time can eat up the servers resources. To prevent this a job queue should be used in conjunction with a limited number of parallel executors.&lt;/p>
&lt;h2 id="pseudo-webbrowsers" class="paragraph-header">Pseudo Webbrowsers &lt;a
href="#pseudo-webbrowsers">&lt;/a>&lt;/h2>
&lt;p>Full-featured browser engines like firefox and chromium are powerful but (relatively) slow. There are engines which only implement a subset of the web standards (e.g. only HTML4 with some CSS3 rules) but have a significant higher throughput and less resource usage. Examples are
&lt;a href="https://weasyprint.org/" target="_blank" rel="noopener noreferrer">WeasyPrint&lt;/a> and
&lt;a href="https://xhtml2pdf.readthedocs.io/" target="_blank" rel="noopener noreferrer">xhtml2pdf&lt;/a>. The downside of this approach is that due to the non-standard conforming behaviour each engine interprets the html and css rules differently. So the templates will not be portable. It might also be difficult to figure out how the engine actually interprets positioning and styling rules.&lt;/p></description></item><item><title>Strategies for Docker image tagging</title><link>https://knrdl.github.io/posts/docker-image-tagging/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/docker-image-tagging/</guid><description>&lt;p>Each docker image has a URI-style name like &lt;code>domain.tld:port/directory/subdir:tag&lt;/code>. The image name &lt;code>ubuntu&lt;/code> is just a shortcut for &lt;code>docker.io/library/ubuntu:latest&lt;/code>. The default tag (if omitted) is &lt;code>latest&lt;/code>. Docker (or &lt;abbr title="Open Container Initiative">OCI&lt;/abbr>) images should be built automatically in &lt;abbr title="Continuous Integration">CI&lt;/abbr>-Pipelines. There are multiple strategies for tagging those images:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Docker Image Tagging via Git Commit Tags:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Relevant git commits are tagged as versions, e.g. &lt;code>v3.2.1&lt;/code>&lt;/li>
&lt;li>The corresponding docker image gets tagged as &lt;code>3.2.1&lt;/code>. If there are multiple image flavours, maybe also &lt;code>3.2.1-alpine&lt;/code> or &lt;code>v3.2.1-slim&lt;/code>&lt;/li>
&lt;li>
&lt;a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning&lt;/a> is also applicable: In addition to the image tag &lt;code>3.2.1&lt;/code>, the tags &lt;code>3.2&lt;/code> and &lt;code>3&lt;/code> should also be assigned, if &lt;code>3.2.1&lt;/code> is the newest version for both version series.&lt;/li>
&lt;li>The image created from the newest git commit tag (the newest version) must also be tagged as &lt;code>latest&lt;/code>&lt;/li>
&lt;li>Docker images without associated git commit tag can be tagged as &lt;code>edge&lt;/code> (convention) or something like &lt;code>unstable&lt;/code>, &lt;code>nightly&lt;/code> etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Docker Image Tagging via Git Commit Hash:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>If there are no distinguishable software versions, the first 6 letters of the git commit hash (SHA) can be used to tag an image.&lt;/li>
&lt;li>The &lt;code>latest&lt;/code> tag gets assigned manually to a docker image.&lt;/li>
&lt;li>Pro: It&amp;rsquo;s easy to find the belonging image for a git commit. So an old version can easily be deployed if the newer one fails. Therefore, you must know which commit introduced the problem.&lt;/li>
&lt;li>Contra:
&lt;ul>
&lt;li>Produces many tagged images =&amp;gt; Docker Image Tag Deletion Policy must be enforced&lt;/li>
&lt;li>Tags will only be sortable by their creation date (might be wrong in case of manual intervention)&lt;/li>
&lt;li>It&amp;rsquo;s hard to know which tags bring in small or big changes (missing
&lt;a href="https://semver.org/" target="_blank" rel="noopener noreferrer">semantic versioning&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Strategy is only useful if there is no software versioning scheme in place and also git push&amp;rsquo;s to the main branch are not too frequent.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Docker Image Tagging for the Bleeding Edge:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>There is not dedicated tagging at all&lt;/li>
&lt;li>The newest commit gets tagged as &lt;code>latest&lt;/code>&lt;/li>
&lt;li>Move fast and break things&lt;/li>
&lt;li>To reproduce old versions the old image must be built again (make sure to pin the versions of all dependencies your software needs). Alternatively important old versions can be tagged manually.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Docker Image Tagging with Timestamps:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Each docker image tag is a timestamp of the build date.&lt;/li>
&lt;li>The last run build is tagged as &lt;code>latest&lt;/code>&lt;/li>
&lt;li>Problematic if old versions are built via CI-Pipelines at a later time&lt;/li>
&lt;li>Useful for nightly builds only. Produce tags like &lt;code>nightly-YYYYMMDD&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Which strategy is right for me? It depends! Maybe a combination &amp;hellip;&lt;/p>
&lt;hr>
&lt;h3 id="tldr--opinion" class="paragraph-header">TL;DR / Opinion &lt;a
href="#tldr--opinion">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Use git tags for software versioning&lt;/strong>
&lt;ul>
&lt;li>If the newest git tag is &lt;code>v3.2.1&lt;/code>, the built docker image should be tagged as &lt;code>3.2.1&lt;/code>, &lt;code>3.2&lt;/code> and &lt;code>3&lt;/code>.&lt;/li>
&lt;li>The newest software version (by git tag) additionally gets tagged as &lt;code>latest&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Building a docker image from a git commit without tag, the resulting docker image should be tagged as &lt;code>edge&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Bind non-root process to privileged port inside a Docker container</title><link>https://knrdl.github.io/posts/docker-non-root-privileged-port/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/docker-non-root-privileged-port/</guid><description>&lt;p>The Principle of Least Privilege (PoLP) should also be applied to applications inside a container! Running stuff as root
user is never a good idea. A custom user profile with fewer privileges should be created and used instead.&lt;/p>
&lt;p>But such a user cannot bind a privileged port (&amp;lt;1024), e.g. start a webserver on port 80. Exposure via port binding to
the host is still unproblematic, e.g. &lt;code>docker run -p 80:8080 ...&lt;/code> will bind port 8080 of the container to port 80 on the
host.&lt;/p>
&lt;p>But what if two services share a Docker Network to reach each other? Then requests have to be made to
e.g. &lt;strong>http://service2:8080/api&lt;/strong> (includes the port 8080). This is a bit ugly because &lt;strong>service1&lt;/strong> now needs to contain
runtime information about &lt;strong>service2&lt;/strong> (contradicts goal of loose coupling). An endpoint like &lt;strong>http://service2/api&lt;/strong> (defaults to port 80) is preferable.&lt;/p>
&lt;p>The following Dockerfile achieves that goal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">FROM&lt;/span>&lt;span style="color:#f1fa8c"> python:3-alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># allow non privileged user to run server on port 80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> apk add --no-cache libcap &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> setcap &lt;span style="color:#f1fa8c">&amp;#39;cap_net_bind_service=+ep&amp;#39;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>readlink -f &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>which python3&lt;span style="color:#ff79c6">)&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> apk del libcap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">EXPOSE&lt;/span>&lt;span style="color:#f1fa8c"> 80/tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> adduser --home /home/appname --disabled-password --shell /bin/false --uid &lt;span style="color:#bd93f9">1000&lt;/span> appname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># all commands after the USER-command will be executed as user `appname`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">USER&lt;/span>&lt;span style="color:#f1fa8c"> appname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> whoami
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># now the app can run on port 80 as non root user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">CMD&lt;/span> python3 myapp.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The program &lt;code>setcap&lt;/code> is used to give the executable (e.g. &lt;code>/usr/bin/python3&lt;/code> or &lt;code>/bin/myapp&lt;/code>) the necessary capability (permission). It&amp;rsquo;s not needed afterwards, so it might be deleted to keep the image small.&lt;/p>
&lt;blockquote>
&lt;p class="info">If you work with &lt;abbr title="Advanced Packaging Tool">APT&lt;/abbr> (Ubuntu/Debian images) just use the
package &lt;code>libcap2-bin&lt;/code> instead of &lt;code>libcap&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>Postgres: Create enum if not exists</title><link>https://knrdl.github.io/posts/postgres-enum/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/postgres-enum/</guid><description>&lt;p>In postgres there is nothing like &lt;code>create table if not exists&lt;/code> for enums. Workaround:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">DO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">BEGIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">CREATE&lt;/span> &lt;span style="color:#ff79c6">TYPE&lt;/span> request_type &lt;span style="color:#ff79c6">AS&lt;/span> ENUM (&lt;span style="color:#f1fa8c">&amp;#39;request_type1&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;request_type2&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">EXCEPTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">WHEN&lt;/span> duplicate_object &lt;span style="color:#ff79c6">THEN&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">END&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$$;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Svelte: Warn user when caps lock is active</title><link>https://knrdl.github.io/posts/svelte-caps-lock/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/svelte-caps-lock/</guid><description>&lt;p>Useful when webpage contains password inputs&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-svelte" data-lang="svelte">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">script&lt;/span> &lt;span style="color:#50fa7b">lang&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;ts&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> warnCapsLockOn: &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> checkCapsLock(e: &lt;span style="color:#8be9fd">KeyboardEvent&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> warnCapsLockOn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">!!&lt;/span>e.getModifierState(&lt;span style="color:#f1fa8c">&amp;#34;CapsLock&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff79c6">svelte:body&lt;/span> &lt;span style="color:#50fa7b">on:keyup&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>{checkCapsLock}&lt;span style="color:#f1fa8c">/&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ff79c6">#if&lt;/span> warnCapsLockOn}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff79c6">div&lt;/span> &lt;span style="color:#50fa7b">class&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;text-danger&amp;#34;&lt;/span>&amp;gt;Attention, caps lock on!&amp;lt;/&lt;span style="color:#ff79c6">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ff79c6">/if&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Linux Laptop: Wifi dependent profiles</title><link>https://knrdl.github.io/posts/linux-laptop-wifi-profiles/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/linux-laptop-wifi-profiles/</guid><description>&lt;p>A notebook as mobile device may should behave differently depending on the location. Examples:&lt;/p>
&lt;ul>
&lt;li>at home:
&lt;ul>
&lt;li>sound output should be turned on&lt;/li>
&lt;li>a backup script can run from time to time&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>in a foreign network / without connection:
&lt;ul>
&lt;li>speakers should be muted&lt;/li>
&lt;li>a vpn connection should be established in public networks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>at work:
&lt;ul>
&lt;li>speakers should be muted&lt;/li>
&lt;li>time tracking software should be active&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Evaluating the ssid (name) of the currently connected Wi-Fi on connection change is a cheap solution. This can be done
by using a hook of the network manager.&lt;/p>
&lt;ol>
&lt;li>Create file &lt;code>/etc/NetworkManager/dispatcher.d/90-wifi-profiles&lt;/code> (replace 3x &lt;code>yourname&lt;/code>)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">interface&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">event&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># only listen to connect/disconnect events&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[[&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$event&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;connectivity-change&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">]]&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">exit&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># check user is logged in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>who | awk &lt;span style="color:#f1fa8c">&amp;#39;{print $1}&amp;#39;&lt;/span> | grep -q &lt;span style="color:#f1fa8c">&amp;#39;^yourname$&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">exit&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo -u yourname /home/yourname/.wifi-profile &amp;gt;&amp;gt; /var/log/wifi-profiles 2&amp;gt;&amp;amp;&lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo chown root:root /etc/NetworkManager/dispatcher.d/90-wifi-profiles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo chmod o+x /etc/NetworkManager/dispatcher.d/90-wifi-profiles
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Create &lt;code>~/.wifi-profile&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># user specific env vars need to be set manually!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">export&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">XDG_RUNTIME_DIR&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>/run/user/1000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">export&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">DISPLAY&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> soundOff&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> amixer -D pulse sset Master mute
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> soundOn&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> amixer -D pulse sset Master 40%
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> amixer -D pulse sset Master unmute
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> askConnectVpn&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zenity --question --title &lt;span style="color:#f1fa8c">&amp;#34;Foreign Wifi&amp;#34;&lt;/span> --text &lt;span style="color:#f1fa8c">&amp;#34;Connect to home VPN?&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> nmcli con up id yourvpn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">SSID&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>iwgetid -r&lt;span style="color:#ff79c6">)&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[[&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$SSID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;home_network1&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$SSID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;home_network2&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">]]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span> &lt;span style="color:#6272a4"># at home&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> soundOn &lt;span style="color:#6272a4"># use carefully, might not be wanted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># run backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">elif&lt;/span> &lt;span style="color:#ff79c6">[[&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$SSID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;work_network1&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$SSID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;work_network2&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">]]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span> &lt;span style="color:#6272a4"># at work&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> soundOff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">elif&lt;/span> &lt;span style="color:#ff79c6">[[&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$SSID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">]]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span> &lt;span style="color:#6272a4"># not connected&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> soundOff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#6272a4"># foreign network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> soundOff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> askConnectVpn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ chmod o+x ~/.wifi-profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Test&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo /etc/NetworkManager/dispatcher.d/90-wifi-profiles wlan0 connectivity-change
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat /var/log/wifi-profiles
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Arduino: ESP as static webserver</title><link>https://knrdl.github.io/posts/arduino-esp-static-webserver/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/arduino-esp-static-webserver/</guid><description>&lt;p>The ESP8266/ESP32/NodeMCU boards firmware has builtin support to run a http server. It&amp;rsquo;s possible to build a restful
json api but also to serve static files.&lt;/p>
&lt;h2 id="setup" class="paragraph-header">Setup &lt;a
href="#setup">&lt;/a>&lt;/h2>
&lt;p>Arduino IDE → File → Preferences → Additional Board Manager
URLs:
&lt;a href="http://arduino.esp8266.com/stable/package_esp8266com_index.json" target="_blank" rel="noopener noreferrer">http://arduino.esp8266.com/stable/package_esp8266com_index.json&lt;/a>&lt;/p>
&lt;h2 id="connect-to-wifi" class="paragraph-header">Connect to Wifi &lt;a
href="#connect-to-wifi">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;ESP8266WiFi.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;WiFiClient.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ssid &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;YOUR_NETWORK_NAME&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>password &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;YOUR_NETWORK_PASSWORD&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">setup&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WiFi.mode(WIFI_STA); &lt;span style="color:#6272a4">// stationary mode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> WiFi.begin(ssid, password);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Wait for connection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">while&lt;/span> (WiFi.status() &lt;span style="color:#ff79c6">!=&lt;/span> WL_CONNECTED) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delay(&lt;span style="color:#bd93f9">50&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">loop&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="basic-api-server" class="paragraph-header">Basic API Server &lt;a
href="#basic-api-server">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;ESP8266WiFi.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;WiFiClient.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;ESP8266WebServer.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ESP8266WebServer &lt;span style="color:#50fa7b">server&lt;/span>(&lt;span style="color:#bd93f9">80&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">handleNotFound&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.send(&lt;span style="color:#bd93f9">404&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;text/plain&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;404 not found&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">serveInfo&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String json &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;{&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">free_heap&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> String(ESP.getFreeHeap());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;,&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">heap_frag_perc&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> String(ESP.getHeapFragmentation());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;,&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">last_reset_reason&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> String(ESP.getResetReason()) &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;,&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">uptime&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> String(millis() &lt;span style="color:#ff79c6">/&lt;/span> &lt;span style="color:#bd93f9">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;,&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">cpu_freq&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> String(ESP.getCpuFreqMHz());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;,&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">wifi_rssi&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> String(WiFi.RSSI());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;,&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">ip&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> WiFi.localIP().toString() &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;,&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">mac&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> WiFi.macAddress() &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.send(&lt;span style="color:#bd93f9">200&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;application/json&amp;#34;&lt;/span>, json);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">setup&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.on(&lt;span style="color:#f1fa8c">&amp;#34;/api/system&amp;#34;&lt;/span>, serveInfo);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.onNotFound(handleNotFound);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.begin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">loop&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.handleClient();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="static-file-server" class="paragraph-header">Static file server &lt;a
href="#static-file-server">&lt;/a>&lt;/h2>
&lt;p>There a few more steps to take here:&lt;/p>
&lt;ol>
&lt;li>Aggregate files which should be served by the arduino&lt;/li>
&lt;li>Flash files from computer to a filesystem on the arduino board&lt;/li>
&lt;li>Serve files from the arduino filesystem via http.&lt;/li>
&lt;/ol>
&lt;h3 id="littlefs" class="paragraph-header">LittleFS &lt;a
href="#littlefs">&lt;/a>&lt;/h3>
&lt;p>LittleFS is a filesystem for microcontrollers. It supports path-based read/write operations:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;LittleFS.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">writeFile&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> String path, &lt;span style="color:#ff79c6">const&lt;/span> String message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File file &lt;span style="color:#ff79c6">=&lt;/span> LittleFS.open(path, &lt;span style="color:#f1fa8c">&amp;#34;w&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file.print(message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file.close();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">inline&lt;/span> String &lt;span style="color:#50fa7b">readFile&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> String path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File file &lt;span style="color:#ff79c6">=&lt;/span> LittleFS.open(path, &lt;span style="color:#f1fa8c">&amp;#34;r&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>file &lt;span style="color:#ff79c6">||&lt;/span> file.isDirectory()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> String message &lt;span style="color:#ff79c6">=&lt;/span> file.readString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file.close();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fileserver" class="paragraph-header">Fileserver &lt;a
href="#fileserver">&lt;/a>&lt;/h3>
&lt;p>A webserver to serve files from a single directory (e.g. &lt;code>/index.html&lt;/code>, &lt;code>/styles.css&lt;/code>, &lt;code>/main.js&lt;/code>, &amp;hellip;) based on
LittleFS would look like this:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="background-color:#3d3f4a">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/span>&lt;span style="background-color:#3d3f4a">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/span>&lt;span style="background-color:#3d3f4a">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;ESP8266WebServer.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;LittleFS.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;uri/UriBraces.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ESP8266WebServer &lt;span style="color:#50fa7b">server&lt;/span>(&lt;span style="color:#bd93f9">80&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">serveStaticFiles&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String filename &lt;span style="color:#ff79c6">=&lt;/span> server.pathArg(&lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename.replace(&lt;span style="color:#f1fa8c">&amp;#34;..&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// mitigate path traversal attacks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> filename.replace(&lt;span style="color:#f1fa8c">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// serve from a single folder only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> filename.trim();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (filename &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;index.html&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String path &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;/www/&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> filename; &lt;span style="color:#6272a4">// assuming files are served from /www/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">const&lt;/span> String contentType &lt;span style="color:#ff79c6">=&lt;/span> mime&lt;span style="color:#ff79c6">::&lt;/span>getContentType(path);
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3f4a">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>LittleFS.exists(path)) {
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3f4a">&lt;span> path &lt;span style="color:#ff79c6">=&lt;/span> path &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;.gz&amp;#34;&lt;/span>; &lt;span style="color:#6272a4">// explained in compression section below
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3f4a">&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>LittleFS.exists(path)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.send(&lt;span style="color:#bd93f9">404&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;text/plain&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;404 not found&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File file &lt;span style="color:#ff79c6">=&lt;/span> LittleFS.open(path, &lt;span style="color:#f1fa8c">&amp;#34;r&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.streamFile(file, contentType);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file.close();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">setup&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LittleFS.begin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.on(UriBraces(&lt;span style="color:#f1fa8c">&amp;#34;/{}&amp;#34;&lt;/span>), serveStaticFiles);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.begin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">loop&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.handleClient();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="setup-1" class="paragraph-header">Setup &lt;a
href="#setup-1">&lt;/a>&lt;/h3>
&lt;p>To flash files to the arduino an additional library for Arduino IDE is required:&lt;/p>
&lt;ol>
&lt;li>
&lt;a href="https://github.com/earlephilhower/arduino-esp8266littlefs-plugin" target="_blank" rel="noopener noreferrer">https://github.com/earlephilhower/arduino-esp8266littlefs-plugin&lt;/a>&lt;/li>
&lt;li>unpack to &lt;code>~/Arduino/tools/ESP8266LittleFS/tool/esp8266littlefs.jar&lt;/code>&lt;/li>
&lt;li>Restart Arduino IDE&lt;/li>
&lt;li>In Arduino IDE: Tools → ESP8266 Little FS Data Upload&lt;/li>
&lt;li>It will upload all files (and dirs) in the &lt;code>data&lt;/code> directory, which needs to be in the same folder as the
sketch (&lt;code>.ino&lt;/code>
file)&lt;/li>
&lt;/ol>
&lt;h3 id="compression" class="paragraph-header">Compression &lt;a
href="#compression">&lt;/a>&lt;/h3>
&lt;p>The ESP8266 runs at 80MHz cpu frequency (can be changed to 160MHz). Transferring large files takes some time (e.g. more
than a second for a couple of megabytes).&lt;/p>
&lt;p>So pre-compressing files might improve performance. The following script gzips all files in the &lt;code>www&lt;/code> dir and saves them
to &lt;code>data/www&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>rm -rf data/www
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p data/www
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">for&lt;/span> filename in ./www/*; &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cat &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$filename&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> | gzip -9 &amp;gt; &lt;span style="color:#f1fa8c">&amp;#34;data/&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$filename&lt;/span>&lt;span style="color:#f1fa8c">.gz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So when using the &amp;ldquo;ESP8266 Little FS Data Upload&amp;rdquo; button only the compressed versions will be uploaded (as &lt;code>/www/...&lt;/code> on
the arduino). The server can handle pre-compressed files because of the precaution in Lines 17-19 of the server script
above. The correct http response header &lt;code>Content-Encoding: gzip&lt;/code> will be automatically set by the command on Line 24.&lt;/p></description></item><item><title>SSH Tunneling</title><link>https://knrdl.github.io/posts/ssh-tunneling/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/ssh-tunneling/</guid><description>&lt;p>SSH allows tcp port forwarding between ssh client and ssh server as part of the encrypted ssh connection.&lt;/p>
&lt;h2 id="server--client-local" class="paragraph-header">Server → Client (local) &lt;a
href="#server--client-local">&lt;/a>&lt;/h2>
&lt;p>A socket on the server (source) gets forwarded to the client (target).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L target_ip:target_port:source_ip:source_port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-case-1-admin-software" class="paragraph-header">Use case 1: Admin software &lt;a
href="#use-case-1-admin-software">&lt;/a>&lt;/h3>
&lt;p>Server socket with port 9000 will be available on client machine at port 5000.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L 127.0.0.1:5000:127.0.0.1:9000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful if admin software is only accessible on the server (localhost binding) and not exposed to the network.&lt;/p>
&lt;h3 id="use-case-2-quick-demo" class="paragraph-header">Use Case 2: Quick demo &lt;a
href="#use-case-2-quick-demo">&lt;/a>&lt;/h3>
&lt;p>Server socket with port 9000 will be accessible at client network on port 8080 of the client machine.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L 8080:127.0.0.1:9000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh user@host -L 0.0.0.0:8080:127.0.0.1:9000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful for a quick demo of a service running in a different network (e.g. cloud) to multiple participants in the same
network (e.g. company).&lt;/p>
&lt;h3 id="use-case-3-jump-host" class="paragraph-header">Use case 3: Jump Host &lt;a
href="#use-case-3-jump-host">&lt;/a>&lt;/h3>
&lt;p>Server can reach host with ip addr 192.168.1.15. Service on 192.168.1.15:8080 will be available on client machine at
port 8081.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -L 127.0.0.1:8081:192.168.1.15:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hop to hop forwarding of hosts accessible in the server network(s).&lt;/p>
&lt;h2 id="client--server-remote" class="paragraph-header">Client → Server (remote) &lt;a
href="#client--server-remote">&lt;/a>&lt;/h2>
&lt;p>A socket on the client (source) gets forwarded to the server (target).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -R target_port:source_ip:source_port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-case-1-microservice-development" class="paragraph-header">Use case 1: Microservice development &lt;a
href="#use-case-1-microservice-development">&lt;/a>&lt;/h3>
&lt;p>Service on port 8000 of the client machine will be available on server at port 8081. Unless &lt;code>GatewayPorts&lt;/code> is set
to &lt;code>yes&lt;/code> in sshd config (default &lt;code>no&lt;/code>) the serverside bind will always be localhost (127.0.0.1).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -R 8081:127.0.0.1:8000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful to integrate a microservice on developer machine into a foreign environment (e.g. test cluster). Also works with
other source addresses than &lt;code>127.0.0.1&lt;/code>.&lt;/p>
&lt;h3 id="use-case-2-tls-terminating-web-proxy-as-a-service" class="paragraph-header">Use case 2: TLS terminating web proxy as a service &lt;a
href="#use-case-2-tls-terminating-web-proxy-as-a-service">&lt;/a>&lt;/h3>
&lt;p>Client starts a http server on local machine on port 8000. That service will be available as
&lt;a href="https://server.tld" target="_blank" rel="noopener noreferrer">https://server.tld&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ssh user@host -R 8001:127.0.0.1:8000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Processing order:&lt;/p>
&lt;ol>
&lt;li>Webbrowser (User Agent) requests
&lt;a href="https://server.tld" target="_blank" rel="noopener noreferrer">https://server.tld&lt;/a>&lt;/li>
&lt;li>Reaches a reverse proxy on port 443
&lt;ul>
&lt;li>does tls termination&lt;/li>
&lt;li>and proxying, nginx: &lt;code>proxy_pass 127.0.0.1:8001;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SSH Tunnel&lt;/li>
&lt;li>local machine port 8000 http server&lt;/li>
&lt;/ol>
&lt;h2 id="ssh-config" class="paragraph-header">SSH Config &lt;a
href="#ssh-config">&lt;/a>&lt;/h2>
&lt;p>port forwarding can also be specified on the client in &lt;code>~/.ssh/config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Host server-01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HostName 192.168.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Port 22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User clusteradm
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3f4a">&lt;span> LocalForward localhost:9001 localhost:9000
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3f4a">&lt;span> RemoteForward 8001 localhost:8000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KeepAlive yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IdentitiesOnly yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IdentityFile ~/.ssh/server_01_clusteradm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Config format is &lt;code>(Local|Remote)Forward target source&lt;/code>&lt;/p>
&lt;p>connect via &lt;code>$ ssh server-01&lt;/code>&lt;/p>
&lt;h2 id="persistent-connections" class="paragraph-header">Persistent connections &lt;a
href="#persistent-connections">&lt;/a>&lt;/h2>
&lt;p>Just use the &lt;code>autossh&lt;/code> command in place of &lt;code>ssh&lt;/code>. AutoSSH uses heartbeats to check if the connection is still open and
open another one otherwise automatically and fully transparent.&lt;/p>
&lt;h2 id="dedicated-tunneling-server" class="paragraph-header">Dedicated tunneling server &lt;a
href="#dedicated-tunneling-server">&lt;/a>&lt;/h2>
&lt;p>It&amp;rsquo;s possible to run a standalone ssh server which just allows port forwarding and no remote command execution. Setup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir -p /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adduser --gecos &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span> --no-create-home --shell /bin/false --disabled-password --uid &lt;span style="color:#bd93f9">1000&lt;/span> sshtunnel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Excerpt from &lt;code>/etc/ssh/sshd_config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># AllowUsers list all users which should be able to login&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AllowUsers sshtunnel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Match User sshtunnel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTTY no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Banner none
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> X11Forwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowAgentForwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># AllowTcpForwarding: yes (= local+remote), local, remote, no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowTcpForwarding &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GatewayPorts no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTunnel no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChrootDirectory /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ForceCommand /bin/false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitOpen 127.0.0.1:8730
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Start sshd in foreground: &lt;code>$ sshd -D -e&lt;/code>&lt;/p>
&lt;p>Connect client: &lt;code>$ ssh -N -L 127.0.0.1:8730:127.0.0.1:8730 sshtunnel@localhost&lt;/code>&lt;/p>
&lt;p>Flag &lt;code>-N&lt;/code> prevents the spawning of a shell (which would result in a connection abortion otherwise).&lt;/p>
&lt;h2 id="rsync-tunneling-also-sftp" class="paragraph-header">Rsync tunneling (also sftp) &lt;a
href="#rsync-tunneling-also-sftp">&lt;/a>&lt;/h2>
&lt;p>&lt;code>rsync&lt;/code> can copy (sync) files between hosts. Therefore, it can use ssh as a transfer protocol. But that implies running
the rsync command on the server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rsync -av -e ssh user@host:/backup/ /datadir/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That won&amp;rsquo;t work with a tunneling only ssh server. Luckily rsync can also be operated with a standalone server, so the
rsync protocol can be tunneled via ssh.&lt;/p>
&lt;h3 id="server-setup" class="paragraph-header">Server Setup &lt;a
href="#server-setup">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>adduser --gecos &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span> --no-create-home --shell /bin/false --disabled-password --uid &lt;span style="color:#bd93f9">1001&lt;/span> rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkdir -p /jail/backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown -R root:root /jail &lt;span style="color:#6272a4"># user cannot have write permission to chroot dir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown -R rsyncbackup:rsyncbackup /jail/backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chmod -R &lt;span style="color:#bd93f9">755&lt;/span> /jail/backup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Excerpt from &lt;code>/etc/ssh/sshd_config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># allow sftp connections&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Subsystem sftp internal-sftp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># AllowUsers list all users which should be able to login&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AllowUsers rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Match User rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTTY no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Banner none
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> X11Forwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowAgentForwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># AllowTcpForwarding: yes (= local+remote), local, remote, no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AllowTcpForwarding &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GatewayPorts no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitTunnel no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChrootDirectory /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ForceCommand internal-sftp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PermitOpen 127.0.0.1:8730
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition to rsync this config also allows file browsing via sftp in the &lt;code>/jail&lt;/code> dir.&lt;/p>
&lt;p>Rsync server config in &lt;code>/etc/rsyncd.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>use &lt;span style="color:#8be9fd;font-style:italic">chroot&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hosts &lt;span style="color:#8be9fd;font-style:italic">allow&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> 127.0.0.1/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">port&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">8730&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">timeout&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max &lt;span style="color:#8be9fd;font-style:italic">connections&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reverse &lt;span style="color:#8be9fd;font-style:italic">lookup&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log &lt;span style="color:#8be9fd;font-style:italic">file&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> /dev/stdout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log &lt;span style="color:#8be9fd;font-style:italic">format&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> %h %o %f %l %b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pid &lt;span style="color:#8be9fd;font-style:italic">file&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> /var/run/rsyncd.pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">[&lt;/span>backup_sink&lt;span style="color:#ff79c6">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">comment&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> Backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">path&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> /jail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">read&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">only&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">list&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">uid&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">gid&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> rsyncbackup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Start rsync server: &lt;code>$ rsync --daemon --config /etc/rsyncd.conf&lt;/code>&lt;/p>
&lt;h3 id="client-setup" class="paragraph-header">Client Setup &lt;a
href="#client-setup">&lt;/a>&lt;/h3>
&lt;p>Record in &lt;code>.ssh/config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> Host backup-conn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HostName 192.168.1.32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Port &lt;span style="color:#bd93f9">2201&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User rsyncbackup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KeepAlive yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalForward 127.0.0.1:8730 127.0.0.1:8730
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run a rsync job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -N backup-conn &amp;amp; &lt;span style="color:#6272a4"># no tty possible, either use pubkey-auth or use sshpass to submit the password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">pid&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep &lt;span style="color:#bd93f9">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">time&lt;/span> rsync bigfile rsync://localhost:8730/backup_sink/backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">kill&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check that &lt;code>/jail/backup/bigfile&lt;/code> has been created on the server.&lt;/p></description></item><item><title>GlusterFs Setup</title><link>https://knrdl.github.io/posts/glusterfs-setup/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/glusterfs-setup/</guid><description>&lt;p>GlusterFs is a distributed storage layer based on
the
&lt;a href="https://www.andrew.cmu.edu/course/15-749/READINGS/required/cas/tridgell96.pdf" target="_blank" rel="noopener noreferrer">rsync algorithm&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p class="danger">GlusterFs works great for semi-static files, but not for databases like sqlite or postgres!
Furthermore, inotify-based programs (file change monitoring) won&amp;rsquo;t work reliable.&lt;/p>
&lt;/blockquote>
&lt;h2 id="setup" class="paragraph-header">Setup &lt;a
href="#setup">&lt;/a>&lt;/h2>
&lt;p>For best performance the traffic between nodes stays unencrypted. Such a glusterfs should only be operated in a dedicated, trustworthy network.&lt;/p>
&lt;p>The following setup will create a storage cluster on 3 nodes (node1, node2, node3) as NAS RAID1 (mirroring)&lt;/p>
&lt;h3 id="1-on-each-node" class="paragraph-header">1. On each node: &lt;a
href="#1-on-each-node">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install --no-install-recommends glusterfs-server rpcbind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start glusterd.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl &lt;span style="color:#8be9fd;font-style:italic">enable&lt;/span> glusterd.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkdir -p /media/storage0/gluster &lt;span style="color:#6272a4"># where cluster data should be stored&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-on-primary-node" class="paragraph-header">2. On primary node: &lt;a
href="#2-on-primary-node">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo gluster peer probe node1 &lt;span style="color:#6272a4"># replace node1 with real hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster peer probe node2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster peer probe node3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster pool list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster volume create vol0 replica &lt;span style="color:#bd93f9">3&lt;/span> node1:/media/storage0/gluster node2:/media/storage0/gluster node3:/media/storage0/gluster force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># force is only necessary if /media/storage0/gluster is on at least one node mounted on the root partition (and not an additional partition / drive)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster volume info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster volume start vol0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster volume &lt;span style="color:#8be9fd;font-style:italic">set&lt;/span> vol0 auth.allow 127.0.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># allow connections only from localhost (each gluster-node will mount their local storage, access from other hosts in network is prevented)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gluster volume info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-on-each-node" class="paragraph-header">3. On each node: &lt;a
href="#3-on-each-node">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo mkdir -p /media/gluster0 &lt;span style="color:#6272a4"># where gluster gets mounted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown -R 1000:1000 /media/gluster0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo bash -c &lt;span style="color:#f1fa8c">&amp;#39;echo &amp;#34;127.0.0.1:/vol0 /media/gluster0 glusterfs defaults,_netdev 0 0&amp;#34; &amp;gt;&amp;gt; /etc/fstab&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mount -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-test" class="paragraph-header">4. Test: &lt;a
href="#4-test">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># one one node: &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;hello world&amp;#34;&lt;/span> &amp;gt; /media/gluster0/testfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># on another node:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /media/gluster0/testfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm /media/gluster0/testfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p class="warning">Never write a file/dir directly to &lt;code>/media/storage0/gluster&lt;/code>. GlusterFS won&amp;rsquo;t be able to detect the changes, and they will not be synchronised.&lt;/p>
&lt;/blockquote>
&lt;h3 id="5-on-each-node" class="paragraph-header">5. On each node: &lt;a
href="#5-on-each-node">&lt;/a>&lt;/h3>
&lt;p>Add the ip addresses of all nodes to the &lt;code>/etc/hosts&lt;/code> files to prevent cluster split on DNS outages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>192.168.123.2 node1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.123.3 node2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.123.4 node3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Cleanup bloated postgres index</title><link>https://knrdl.github.io/posts/postgres-bloated-index/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/postgres-bloated-index/</guid><description>&lt;h2 id="1-find-db-byte-sizes" class="paragraph-header">1. find db byte sizes &lt;a
href="#1-find-db-byte-sizes">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">SELECT&lt;/span> datname, pg_size_pretty(pg_database_size(datname))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">FROM&lt;/span> pg_database
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">ORDER&lt;/span> &lt;span style="color:#ff79c6">by&lt;/span> pg_database_size(datname) &lt;span style="color:#ff79c6">DESC&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-find-tables--indices-sizes" class="paragraph-header">2. find tables + indices sizes &lt;a
href="#2-find-tables--indices-sizes">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">select&lt;/span> &lt;span style="color:#ff79c6">table_name&lt;/span>, pg_size_pretty(pg_total_relation_size(quote_ident(&lt;span style="color:#ff79c6">table_name&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">from&lt;/span> information_schema.tables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">where&lt;/span> table_schema &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;public&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">order&lt;/span> &lt;span style="color:#ff79c6">by&lt;/span> pg_total_relation_size(quote_ident(&lt;span style="color:#ff79c6">table_name&lt;/span>)) &lt;span style="color:#ff79c6">desc&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-recreate-index" class="paragraph-header">3. recreate index &lt;a
href="#3-recreate-index">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">REINDEX&lt;/span> &lt;span style="color:#ff79c6">TABLE&lt;/span> hungry;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion" class="paragraph-header">Conclusion &lt;a
href="#conclusion">&lt;/a>&lt;/h2>
&lt;p>index shrank from ~12GiB to ~800MiB&lt;/p></description></item><item><title>Docker Swarm: `error creating vxlan interface: file exists`</title><link>https://knrdl.github.io/posts/docker-swarm-error-create-vxlan/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/docker-swarm-error-create-vxlan/</guid><description>&lt;p>If docker swarm rejects to deploy a service because network interface already exists:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ docker service ps stackname_appname --no-trunc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rejected &lt;span style="color:#bd93f9">34&lt;/span> seconds ago &lt;span style="color:#f1fa8c">&amp;#34;network sandbox join failed: subnet sandbox join failed for &amp;#34;&lt;/span>10.0.14.0/24&lt;span style="color:#f1fa8c">&amp;#34;: error creating vxlan interface: file exists
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then find all problematic interfaces on the host and delete them:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ip -d link show | grep vx | grep DOWN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo ip link delete vx-001095-owhr8 &lt;span style="color:#6272a4"># for each entry&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now redeploying should work!&lt;/p></description></item><item><title>Svelte without node.js installation</title><link>https://knrdl.github.io/posts/svelte-without-node-installation/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/svelte-without-node-installation/</guid><description>&lt;p>Docker (or podman) to the rescue!&lt;/p>
&lt;p>Each first line shown is the Docker command. And the second line is the corresponding command for Podman.&lt;/p>
&lt;h2 id="setup-project" class="paragraph-header">Setup project &lt;a
href="#setup-project">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo docker run --pull always -it --rm --user &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$UID&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$UID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -v &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -w &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> node:alpine npm init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman run --pull always -it --rm -v &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -w &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> node:alpine npm init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="development" class="paragraph-header">Development &lt;a
href="#development">&lt;/a>&lt;/h2>
&lt;p>Svelte has replaced rollup with vite as build tool of choice.&lt;/p>
&lt;h3 id="vite-new" class="paragraph-header">Vite (new) &lt;a
href="#vite-new">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo docker run --pull always -it --rm --user &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$UID&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$UID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -v &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -w &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -p5173:5173 node:alpine npm run dev -- --host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman run --pull always -it --rm -v &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -w &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -p5173:5173 node:alpine npm run dev -- --host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Open
&lt;a href="http://localhost:5173" target="_blank" rel="noopener noreferrer">localhost:5173&lt;/a>&lt;/p>
&lt;p>To omit the &lt;code>-- --host&lt;/code> in the command above, add to your &lt;code>vite.config.js&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> config &lt;span style="color:#ff79c6">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server&lt;span style="color:#ff79c6">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;0.0.0.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rollup-old" class="paragraph-header">Rollup (old) &lt;a
href="#rollup-old">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo docker run --pull always -it --rm --user &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$UID&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$UID&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -v &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -w &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -p8080:8080 -p35729:35729 --env &lt;span style="color:#8be9fd;font-style:italic">HOST&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>0.0.0.0 node:alpine npm run dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman run --pull always -it --rm -v &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -w &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PWD&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> -p8080:8080 -p35729:35729 --env &lt;span style="color:#8be9fd;font-style:italic">HOST&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>0.0.0.0 node:alpine npm run dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Open
&lt;a href="http://localhost:8080" target="_blank" rel="noopener noreferrer">localhost:8080&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p class="info">Port 8080 is for the web server (http). Everything is handled by this port, except hot reloading (optional feature). Therefore, port 35729 is additionally used (websocket).&lt;/p>
&lt;/blockquote>
&lt;h2 id="custom-bashrc-shortcut" class="paragraph-header">Custom &lt;code>.bashrc&lt;/code> shortcut &lt;a
href="#custom-bashrc-shortcut">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">alias&lt;/span> svelte-npm&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;sudo docker run --pull always -it --rm --user &amp;#34;$UID:$UID&amp;#34; -v &amp;#34;$PWD:$PWD&amp;#34; -w &amp;#34;$PWD&amp;#34; -p5173:5173 --env HOST=0.0.0.0 node:alpine npm&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">alias&lt;/span> svelte-npm&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;podman run --pull always -it --rm -v &amp;#34;$PWD:$PWD&amp;#34; -w &amp;#34;$PWD&amp;#34; -p5173:5173 --env HOST=0.0.0.0 node:alpine npm&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Usage: &lt;code>$ svelte-npm run dev&lt;/code>&lt;/p>
&lt;h3 id="more-general-approach" class="paragraph-header">More general approach &lt;a
href="#more-general-approach">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">alias&lt;/span> docker-dir&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;sudo docker run --pull always -it --rm --user &amp;#34;$UID:$UID&amp;#34; -v &amp;#34;$PWD:$PWD&amp;#34; -w &amp;#34;$PWD&amp;#34; --env HOST=0.0.0.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">alias&lt;/span> podman-dir&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;podman run --pull always -it --rm -v &amp;#34;$PWD:$PWD&amp;#34; -w &amp;#34;$PWD&amp;#34; --env HOST=0.0.0.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example: &lt;code>$ docker-dir node:alpine -v&lt;/code>&lt;/p></description></item><item><title>Fix gitlab immense disk usage</title><link>https://knrdl.github.io/posts/gitlab-immense-disk-usage/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://knrdl.github.io/posts/gitlab-immense-disk-usage/</guid><description>&lt;p>The gitlab docker registry has no cleanup job per default. If an image tag gets overwritten (updated) then the original
image layer blobs will be kept as orphans. To clean those up run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gitlab-ctl registry-garbage-collect --delete-untagged --delete-manifest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="automation" class="paragraph-header">Automation &lt;a
href="#automation">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>run the command via Cron (the gitlab image contains &lt;code>go-crond&lt;/code>)&lt;/li>
&lt;li>set command in env var &lt;code>GITLAB_POST_RECONFIGURE_SCRIPT&lt;/code> (executed at least on each container start)&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion" class="paragraph-header">Conclusion &lt;a
href="#conclusion">&lt;/a>&lt;/h2>
&lt;p>170GiB server disk storage freed&lt;/p></description></item></channel></rss>